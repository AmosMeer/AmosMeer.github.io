<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>解决 PHP Interpreter is not configured Please configure PHP Interpreter to use built-in web server</title>
      <link href="/2019/03/25/%E8%A7%A3%E5%86%B3%20PHP%20Interpreter%20is%20not%20configured%20Please%20configure%20PHP%20Interpreter%20to%20use%20built-in%20web%20server/"/>
      <url>/2019/03/25/%E8%A7%A3%E5%86%B3%20PHP%20Interpreter%20is%20not%20configured%20Please%20configure%20PHP%20Interpreter%20to%20use%20built-in%20web%20server/</url>
      
        <content type="html"><![CDATA[<p><img src="https://img-blog.csdn.net/20181018181433508?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0phc21pbmVhaGE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdn.net/20181018181619723?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0phc21pbmVhaGE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdn.net/20181018182018961?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0phc21pbmVhaGE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdn.net/2018101818210939?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0phc21pbmVhaGE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="在这里插入图片描述"></p>]]></content>
      
      
      <categories>
          
          <category> PHP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【dp】 2018-2019 ACM-ICPC, NEERC, Southern Subregional Contest, Qualification Stage</title>
      <link href="/2019/03/25/%E3%80%90dp%E3%80%912018-2019%20ACM-ICPC,%20NEERC,%20Southern%20Subregional%20Contest,%20Qualification%20Stage/"/>
      <url>/2019/03/25/%E3%80%90dp%E3%80%912018-2019%20ACM-ICPC,%20NEERC,%20Southern%20Subregional%20Contest,%20Qualification%20Stage/</url>
      
        <content type="html"><![CDATA[<h1 id="K-Medians-and-Partition"><a href="#K-Medians-and-Partition" class="headerlink" title="K. Medians and Partition"></a>K. Medians and Partition</h1><p><strong>题目链接</strong>：<a href="http://codeforces.com/gym/101911/problem/K" target="_blank" rel="noopener">http://codeforces.com/gym/101911/problem/K</a></p><p>Let median of some array be the number which would stand in the middle of this array if it was sorted beforehand. If the array has even length let median be smallest of of two middle elements. For example, median of the array. Let array be m-good if its median is greater or equal than m.</p><h2 id="Description："><a href="#Description：" class="headerlink" title="Description："></a>Description：</h2><p>将一组数恰好分割成多组数，对每组数进行排序后，使得每组数的中位数大于等于m，求解最多可以分成多少组数</p><h2 id="Solution："><a href="#Solution：" class="headerlink" title="Solution："></a>Solution：</h2><p><strong>ok[i][j]</strong>： 在 [i, j] 这段区间里的中位数是否符合要求，即 ok[i][j] = 1 代表 [i, j] 这段区间的中位数大于等于m<br><strong>dp[i]</strong>：以 i 位置为结尾的区间划分最多可以划分成多少个区间段</p><p>先处理出任意一个子区间是否合法，即中位数是否大于等于m。<br>对于每个结尾的位置 i ，枚举位置每个小段区间的端点 j（也就是这些合法的 j 位置都可以将 [1, n] 这个完整区间分割成多个小段区间）<br>转移方程：dp[i] = max(dp[i], dp[j] + 1)；</p><p>最后维护一下最大值作为答案即可。</p><p>其实对于求解任意一个子区间的中位数时，并不需要具体算出中位数是多少，只要能判断出与 m 的关系即可，比 m 大还是小。<br>时间复杂度：O(n^2)</p><p>发现一种时间复杂度为 O(n) 的做法：<br>对于每一个小于m的数，让它所在的区间中位数大于等于 m，那么所在区间就至少需要两个大于等于 m 的数字，不需要考虑他们之间的顺序，因为每个数对中位数产生的影响不会因为位置的改变的改变，对于一组数来说排序的结果是唯一的。所以统计出小于 m 的数的个数 cnt 后，n-cnt*2 即为答案。</p><h2 id="代码："><a href="#代码：" class="headerlink" title="代码："></a>代码：</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ctime&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> se second</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mst(a, b) memset(a, b, sizeof(a))</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; PII;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> eps = <span class="number">1e-9</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> Mod = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> pi = <span class="built_in">acos</span>(<span class="number">-1</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MaxN = <span class="number">5e3</span> + <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> a[MaxN];</span><br><span class="line"><span class="keyword">int</span> ok[MaxN][MaxN];</span><br><span class="line"><span class="keyword">int</span> dp[MaxN];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d %d"</span>, &amp;n, &amp;m);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;a[i]);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line"><span class="keyword">int</span> cnt = <span class="number">0</span>; <span class="comment">//记录当前[i,j]这个区间内有多少个数比m小，用来判断中位数与m的大小关系</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = i; j &lt;= n; j++) &#123;</span><br><span class="line"><span class="keyword">if</span>(a[j] &lt; m) cnt++;</span><br><span class="line"><span class="keyword">int</span> mid = (j - i + <span class="number">2</span>) / <span class="number">2</span>; <span class="comment">//中位数是第几个数，也就是“第几大数”</span></span><br><span class="line"><span class="keyword">if</span>(cnt &lt; mid) ok[i][j] = <span class="number">1</span>; <span class="comment">//说明此时的中位数一定大于等于m</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">dp[i] = -INF;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; i; j++) &#123;</span><br><span class="line"><span class="keyword">if</span>(ok[j+<span class="number">1</span>][i]) dp[i] = max(dp[i], dp[j] + <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>, max(dp[n], <span class="number">0</span>));</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>O(n) 的做法：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> n, m, x, cnt = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d %d"</span>, &amp;n, &amp;m);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;x);</span><br><span class="line"><span class="keyword">if</span>(x &lt; m) cnt++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>, max(<span class="number">0</span>, n - <span class="number">2</span> * cnt));</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> DP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【容斥】2017 ACM Arabella Collegiate Programming Contest</title>
      <link href="/2019/03/19/%E3%80%90%E5%AE%B9%E6%96%A5%E3%80%912017%20ACM%20Arabella%20Collegiate%20Programming%20Contest/"/>
      <url>/2019/03/19/%E3%80%90%E5%AE%B9%E6%96%A5%E3%80%912017%20ACM%20Arabella%20Collegiate%20Programming%20Contest/</url>
      
        <content type="html"><![CDATA[<h3 id="比赛连接"><a href="#比赛连接" class="headerlink" title="比赛连接"></a><strong><a href="http://codeforces.com/gym/101350" target="_blank" rel="noopener">比赛连接</a></strong></h3><h1 id="G-Snake-Rana"><a href="#G-Snake-Rana" class="headerlink" title="G. Snake Rana"></a>G. Snake Rana</h1><p>Old Macdonald wants to build a new hen house for his hens. He buys a new rectangular area of size N by M. The night before he builds the hen house, snake Rana devises an evil plan to plant bombs in K distinct cells in the area to kill the hens and eat them for dinner later.<br>The morning of, Old Macdonald notices that each of the K cells, where snake Rana planted a bomb, have a marking on them. That won’t stop him though, all he must do is build the hen house in an area with no bombs.<br>Assume that rows are numbered from top to bottom, and columns are numbered from left to right. Old Macdonald now wants to know the number of ways he can choose sub-rectangles of top left coordinates (x1, y1) and bottom right coordinates (x2, y2) (x1 ≤ x2) (y1 ≤ y2) such that there are no bombs in the sub rectangle.</p><h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>一个 n * m 的矩阵包含 k 个炸弹，统计不包含炸弹的子矩阵个数。</p><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p><strong>计算子矩阵数目：</strong><br><img src="https://img-blog.csdnimg.cn/20190327010916135.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0phc21pbmVhaGE=,size_16,color_FFFFFF,t_70" alt=""></p><p><strong>容斥原理：</strong><br>要计算几个集合并集的大小，首先将所有单个集合的大小计算出来，然后减去所有两个集合相交的部分，再加回所有三个集合相交的部分，再减去所有四个集合相交的部分，依此类推，一直计算到所有集合相交的部分。</p><p> 可以简化理解为 <strong>奇加偶减</strong> 或 <strong>奇减偶加</strong>（具体情况具体分析）</p><p> 对于本题来说，首先计算出整个矩阵的所有子矩阵数目（n、m的前缀和乘积），然后分别减去包含一个炸弹、两个炸弹……的矩阵，利用<strong>二进制枚举</strong>炸弹状态（实在是妙）和<strong>容斥原理</strong>（本题是奇减偶加）避免重复相减的情况。</p><h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC diagnostic <span class="meta-keyword">error</span> <span class="meta-string">"-std=c++11"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ctime&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mp make_pair</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> se second</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lowbit(x) x&amp;(-x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PII pair<span class="meta-string">&lt;int, int&gt;;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mst(a, b) memset(a, b, sizeof(a))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FIO ios::sync_with_stdio(false); cin.tie(0); cout.tie(0);</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rush() int T; scanf(<span class="meta-string">"%d"</span>, &amp;T); while(T--)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"><span class="comment">//#define int LL</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> eps = <span class="number">1e-9</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> Mod = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MaxN = <span class="number">1e5</span> + <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span> &#123;</span></span><br><span class="line"> <span class="keyword">int</span> x, y;</span><br><span class="line">&#125;boom[<span class="number">25</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, m, k;</span><br><span class="line">LL ans;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line"> <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; (<span class="number">1</span> &lt;&lt; k); i++) &#123; <span class="comment">// 利用二进制枚举炸弹的状态</span></span><br><span class="line">  <span class="keyword">int</span> u = INF, d = <span class="number">0</span>, l = INF, r = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">   <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; k; j++) &#123; <span class="comment">// 判断当前状态i有哪些炸弹（第j为1说明当前状态下有第j个炸弹</span></span><br><span class="line">     <span class="keyword">if</span>(i &amp; (<span class="number">1</span>&lt;&lt;j)) &#123; <span class="comment">// 判断第j位是否为1，为1说明有炸弹</span></span><br><span class="line">        cnt++;</span><br><span class="line">       u = min(u, boom[j].y);</span><br><span class="line">       d = max(d, boom[j].y);</span><br><span class="line">       l = min(l, boom[j].x);</span><br><span class="line">       r = max(r, boom[j].x);</span><br><span class="line">   &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span>(cnt) &#123;</span><br><span class="line">  LL res = <span class="number">1L</span>L * u * l * (n+<span class="number">1</span>-r) * (m+<span class="number">1</span>-d);</span><br><span class="line">  <span class="keyword">if</span>(cnt &amp; <span class="number">1</span>) ans -= res; <span class="comment">// 容斥原理</span></span><br><span class="line">  <span class="keyword">else</span> ans += res;</span><br><span class="line">  &#125;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int32_t</span> main()</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> t; <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;t);</span><br><span class="line"><span class="keyword">while</span>(t--) &#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d %d %d"</span>, &amp;n, &amp;m, &amp;k);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; k; i++) <span class="built_in">scanf</span>(<span class="string">"%d %d"</span>, &amp;boom[i].x, &amp;boom[i].y);</span><br><span class="line">ans = <span class="number">1L</span>L * n * (<span class="number">1L</span>L + n) / <span class="number">2L</span>L * m * (<span class="number">1L</span>L + m) / <span class="number">2L</span>L;</span><br><span class="line">solve();</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, ans);</span><br><span class="line">&#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 数论 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 容斥 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【DFS】codeforces 638 B. Making Genome in Berland</title>
      <link href="/2019/03/11/%E3%80%90DFS%E3%80%91codeforces%20638%20B.%20Making%20Genome%20in%20Berland/"/>
      <url>/2019/03/11/%E3%80%90DFS%E3%80%91codeforces%20638%20B.%20Making%20Genome%20in%20Berland/</url>
      
        <content type="html"><![CDATA[<h2 id="题目传送门"><a href="#题目传送门" class="headerlink" title="题目传送门"></a><a href="http://codeforces.com/contest/638/problem/B" target="_blank" rel="noopener">题目传送门</a></h2><p>Berland scientists face a very important task - given the parts of short DNA fragments, restore the dinosaur DNA! The genome of a berland dinosaur has noting in common with the genome that we’ve used to: it can have 26 distinct nucleotide types, a nucleotide of each type can occur at most once. If we assign distinct English letters to all nucleotides, then the genome of a Berland dinosaur will represent a non-empty string consisting of small English letters, such that each letter occurs in it at most once.</p><p>Scientists have n genome fragments that are represented as substrings (non-empty sequences of consecutive nucleotides) of the sought genome.<br>You face the following problem: help scientists restore the dinosaur genome. It is guaranteed that the input is not contradictory and at least one suitable line always exists. When the scientists found out that you are a strong programmer, they asked you in addition to choose the one with the minimum length. If there are multiple such strings, choose any string.</p><h1 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h1><p>给出 n 个子串，每个子串中的每个字符都不同（只包含26个小写字母），找到最短的原串，要求原串中的字符也都不同，保证答案一定存在。</p><h1 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h1><p>可以确定的是，每个字母后边要么有唯一确定的字母，要么没有字母。<br>那么只要 某个子串的第一个字符 不是 其他子串的第一个字符 ，那么这个字符就可以作为一个无前驱的结点。<br>所以只需要记录每个字符后边紧跟着的字符，然后直接 dfs 去找即可。</p><h1 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ctime&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MaxN = <span class="number">3e5</span> + <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> vis[<span class="number">50</span>];</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; G[<span class="number">50</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">vis[x] = <span class="number">2</span>; <span class="comment">// 表示字符x已经用过</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; (<span class="keyword">char</span>)(<span class="string">'a'</span> + x);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; G[x].size(); i++) &#123;</span><br><span class="line"><span class="keyword">int</span> u = G[x][i];</span><br><span class="line"><span class="keyword">if</span>(vis[u] != <span class="number">2</span>) &#123;</span><br><span class="line">dfs(u);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> n; <span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line"><span class="built_in">string</span> s; <span class="built_in">cin</span> &gt;&gt; s;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt; s.size(); j++) &#123;</span><br><span class="line">vis[s[j]-<span class="string">'a'</span>] = <span class="number">1</span>;</span><br><span class="line">G[s[j<span class="number">-1</span>]-<span class="string">'a'</span>].push_back(s[j] - <span class="string">'a'</span>); <span class="comment">//如果这个字符在 子串的非第一个字符的位置上 出现过就打上标记，说明不是要寻找的无前驱结点</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(!vis[s[<span class="number">0</span>]-<span class="string">'a'</span>]) vis[s[<span class="number">0</span>]-<span class="string">'a'</span>] = <span class="number">6</span>; <span class="comment">//用来寻找无前驱结点</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">26</span>; i++) &#123;</span><br><span class="line"><span class="keyword">if</span>(vis[i] == <span class="number">6</span>) dfs(i); <span class="comment">//如果当前结点没有前驱</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> DFS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DFS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【DP】 Codeforces Round 536 (Div. 2) E. Lunar New Year and Red Envelopes</title>
      <link href="/2019/02/19/%E3%80%90DP%E3%80%91%20Codeforces%20Round%20536%20(Div.%202)%20E.%20Lunar%20New%20Year%20and%20Red%20Envelopes/"/>
      <url>/2019/02/19/%E3%80%90DP%E3%80%91%20Codeforces%20Round%20536%20(Div.%202)%20E.%20Lunar%20New%20Year%20and%20Red%20Envelopes/</url>
      
        <content type="html"><![CDATA[<p><strong>题目地址：<a href="https://codeforces.com/contest/1106/problem/E" target="_blank" rel="noopener">https://codeforces.com/contest/1106/problem/E</a></strong></p><p>Lunar New Year is approaching, and Bob is going to receive some red envelopes with countless money! But collecting money from red envelopes is a time-consuming process itself.<br>Let’s describe this problem in a mathematical way. Consider a timeline from time 1 to n. The i-th red envelope will be available from time si to ti, inclusive, and contain wi coins. If Bob chooses to collect the coins in the i-th red envelope, he can do it only in an integer point of time between si and ti, inclusive, and he can’t collect any more envelopes until time di (inclusive) after that. Here si≤ti≤di holds.<br>Bob is a greedy man, he collects coins greedily — whenever he can collect coins at some integer time x, he collects the available red envelope with the maximum number of coins. If there are multiple envelopes with the same maximum number of coins, Bob would choose the one whose parameter d is the largest. If there are still multiple choices, Bob will choose one from them randomly.<br>However, Alice — his daughter — doesn’t want her father to get too many coins. She could disturb Bob at no more than m integer time moments. If Alice decides to disturb Bob at time x, he could not do anything at time x and resumes his usual strategy at the time x+1 (inclusive), which may lead to missing some red envelopes.<br>Calculate the minimum number of coins Bob would get if Alice disturbs him optimally.</p><h1 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h1><p>在时间线为 1~n 上有 k 个信封和 m 个干扰机会，每个信封有领取时间段 [s, t]、时间点 d（领了个这个信封之后，在 d 点前无法领取其他信封）、以及价值 w，对于每个干扰机会，可以使其在任意一个时间点无法进行领取操作直到x+1。<br>问最优使用不超过m次干扰下，将领取的最小信封价值总和。每次领取的策略是取当前可领取信封中 w 最大的，w 相同时取 d 最大的。</p><h1 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h1><p>dp[i][j] 表示前 i 个时间点中用了 j 次机会所能得到的最少金币。</p><p>由于Bob每次要优先取 wi 最大，其次是取 di 最大，所以利用优先队列，在当前 i 这个时间点，将所有满足条件的信封放入优先队列，然后再进行转移。</p><p>对于每个时间点 i，如果当前没有满足条件的信封即优先队列为空时，就要把当前时间点的状态保留至下一个时间点。</p><p>$for(int j = 0; j &lt;= m; j++) dp[i+1][j] = Min(dp[i+1][j], dp[i][j]);$</p><p>如果有可用的信封，那么对于每次干扰机会 j，都有选择干扰和不干扰两种操作。</p><p>如果不干扰：$dp[di+1][j] = min(dp[di+1][j], dp[i][j] + wi);$</p><p>如果干扰：$dp[i+1][j+1] = min(dp[i+1][j+1], dp[i][j])$（注意此时 j 必须小与 m）</p><h1 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC diagnostic <span class="meta-keyword">error</span> <span class="meta-string">"-std=c++11"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ctime&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> se second</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mst(a, b) memset(a, b, sizeof(a))</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; PII;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> eps = <span class="number">1e-9</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> Mod = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MaxN = <span class="number">1e5</span> + <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span> &#123;</span></span><br><span class="line"><span class="keyword">int</span> s, t, d, w;</span><br><span class="line"><span class="keyword">bool</span> <span class="keyword">operator</span> &lt; (<span class="keyword">const</span> node&amp; q) <span class="keyword">const</span> &#123;</span><br><span class="line"><span class="keyword">if</span>(q.w == w) <span class="keyword">return</span> q.d &gt; d;</span><br><span class="line"><span class="keyword">return</span> q.w &gt; w;</span><br><span class="line">&#125;</span><br><span class="line">&#125;a[MaxN];;</span><br><span class="line"></span><br><span class="line">priority_queue&lt;node&gt; q;</span><br><span class="line">LL dp[MaxN][<span class="number">205</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(node x, node y)</span> </span>&#123; <span class="keyword">return</span> x.s &lt; y.s; &#125;</span><br><span class="line"></span><br><span class="line"><span class="function">LL <span class="title">Min</span><span class="params">(LL x, LL y)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(y == <span class="number">-1</span>) <span class="keyword">return</span> x;</span><br><span class="line"><span class="keyword">if</span>(x == <span class="number">-1</span>) <span class="keyword">return</span> y;</span><br><span class="line"><span class="keyword">return</span> min(x, y);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> n, m, k;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d %d %d"</span>, &amp;n, &amp;m, &amp;k);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= k; i++) &#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d %d %d %d"</span>, &amp;a[i].s, &amp;a[i].t, &amp;a[i].d, &amp;a[i].w);</span><br><span class="line">&#125;</span><br><span class="line">sort(a + <span class="number">1</span>, a + <span class="number">1</span> + k, cmp);</span><br><span class="line"><span class="built_in">memset</span>(dp, <span class="number">-1</span>, <span class="keyword">sizeof</span>(dp));</span><br><span class="line">dp[<span class="number">1</span>][<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> num = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line"><span class="keyword">while</span>(num &lt;= k &amp;&amp; a[num].s &lt;= i) q.push(a[num++]); <span class="comment">// 选取合法信封</span></span><br><span class="line"><span class="keyword">while</span>(!q.empty() &amp;&amp; q.top().t &lt; i) q.pop(); <span class="comment">// 排除不合法信封</span></span><br><span class="line"><span class="keyword">if</span>(q.empty()) &#123; <span class="comment">// 如果当前时间点没有可选信封，那么当前状态就保留至下一个时间点</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt;= m; j++) dp[i+<span class="number">1</span>][j] = Min(dp[i+<span class="number">1</span>][j], dp[i][j]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">node now = q.top();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt;= m; j++) &#123;</span><br><span class="line"><span class="keyword">if</span>(dp[i][j] == <span class="number">-1</span>) <span class="keyword">continue</span>;</span><br><span class="line">dp[now.d+<span class="number">1</span>][j] = Min(dp[now.d+<span class="number">1</span>][j], dp[i][j]+now.w); <span class="comment">// 不干扰此次操作</span></span><br><span class="line"><span class="keyword">if</span>(j &lt; m) &#123; <span class="comment">// 干扰此次操作</span></span><br><span class="line">dp[i+<span class="number">1</span>][j+<span class="number">1</span>] = Min(dp[i+<span class="number">1</span>][j+<span class="number">1</span>], dp[i][j]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">LL ans = <span class="number">1e18</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= m; i++) ans = min(ans, dp[n+<span class="number">1</span>][i]);</span><br><span class="line">ans = max(<span class="number">0L</span>L, ans); <span class="comment">// 注意ans可能为负</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, ans);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> DP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【DFS、期望】 Codeforces Round 428 (Div. 2) C. Journey</title>
      <link href="/2019/01/17/%E3%80%90DFS%E3%80%81%E6%9C%9F%E6%9C%9B%E3%80%91%20Codeforces%20Round%20428%20(Div.%202)/"/>
      <url>/2019/01/17/%E3%80%90DFS%E3%80%81%E6%9C%9F%E6%9C%9B%E3%80%91%20Codeforces%20Round%20428%20(Div.%202)/</url>
      
        <content type="html"><![CDATA[<h3 id="题目链接：https-codeforces-com-contest-839-problem-C"><a href="#题目链接：https-codeforces-com-contest-839-problem-C" class="headerlink" title="题目链接：https://codeforces.com/contest/839/problem/C"></a>题目链接：<a href="https://codeforces.com/contest/839/problem/C" target="_blank" rel="noopener">https://codeforces.com/contest/839/problem/C</a></h3><p>C. Journey<br>There are n cities and n - 1 roads in the Seven Kingdoms, each road connects two cities and we can reach any city from any other by the roads.<br>Theon and Yara Greyjoy are on a horse in the first city, they are starting traveling through the roads. But the weather is foggy, so they can’t see where the horse brings them. When the horse reaches a city (including the first one), it goes to one of the cities connected to the current city. But it is a strange horse, it only goes to cities in which they weren’t before. In each such city, the horse goes with equal probabilities and it stops when there are no such cities.<br>Let the length of each road be 1. The journey starts in the city 1. What is the expected length (expected value of length) of their journey? You can read about expected (average) value by the link <a href="https://en.wikipedia.org/wiki/Expected_value" target="_blank" rel="noopener">https://en.wikipedia.org/wiki/Expected_value</a>.</p><p>Input<br>The first line contains a single integer n (1 ≤ n ≤ 100000) — number of cities.<br>Then n - 1 lines follow. The i-th line of these lines contains two integers ui and vi (1 ≤ ui, vi ≤ n, ui ≠ vi) — the cities connected by the i-th road.<br>It is guaranteed that one can reach any city from any other by the roads.</p><p>Output<br>Print a number — the expected length of their journey. The journey starts in the city 1.<br>Your answer will be considered correct if its absolute or relative error does not exceed 10 - 6.</p><h1 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h1><p>由 n 个顶点 n-1 条边构成的以 1 为根的树，从根出发，等概率的往其子树走，求走过的路径长度的期望。 </p><h1 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h1><p>DFS.<br>例如：<br><img src="https://img-blog.csdnimg.cn/20190117152938931.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0phc21pbmVhaGE=,size_16,color_FFFFFF,t_70" alt=""><br>对5、6、7号结点期望求和即可。</p><p>需要注意的是，除了 1 号结点之外，其余结点均有父节点，所以在求其子树时需要减一，减去父节点，即：G[x].size()-1。</p><h1 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC diagnostic <span class="meta-keyword">error</span> <span class="meta-string">"-std=c++11"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ctime&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> se second</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mst(a, b) memset(a, b, sizeof(a))</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; PII;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> eps = <span class="number">1e-9</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> Mod = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MaxN = <span class="number">1e5</span> + <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; G[MaxN];</span><br><span class="line"><span class="keyword">int</span> vis[MaxN];</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">DFS</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">vis[x] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">double</span> sum = <span class="number">0.0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; G[x].size(); i++) &#123;</span><br><span class="line"><span class="keyword">int</span> u = G[x][i];</span><br><span class="line"><span class="keyword">if</span>(!vis[u]) &#123;</span><br><span class="line">sum += DFS(u) + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> p = G[x].size() - (x != <span class="number">1</span>);</span><br><span class="line"><span class="keyword">return</span> p ? (sum / p) : <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//ios::sync_with_stdio(false); cin.tie(0); cout.tie(0);</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; i++) &#123;</span><br><span class="line"><span class="keyword">int</span> u, v; <span class="built_in">scanf</span>(<span class="string">"%d %d"</span>, &amp;u, &amp;v);</span><br><span class="line">G[u].push_back(v);</span><br><span class="line">G[v].push_back(u);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%.6lf\n"</span>, DFS(<span class="number">1</span>));</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> DFS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DFS </tag>
            
            <tag> 期望 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>利用 Github Pages 和 Hexo 初步搭建博客</title>
      <link href="/2019/01/09/%E5%88%A9%E7%94%A8%20Github%20Pages%20%E5%92%8C%20Hexo%20%E5%88%9D%E6%AD%A5%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/"/>
      <url>/2019/01/09/%E5%88%A9%E7%94%A8%20Github%20Pages%20%E5%92%8C%20Hexo%20%E5%88%9D%E6%AD%A5%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/</url>
      
        <content type="html"><![CDATA[<p>欢迎各位大佬来参观我的博客：<strong><a href="http://amosmeer.cn/">AmosMeer’s Blog</a></strong><br>搭建过程中出现的任何问题请参考博客：<a href="http://amosmeer.cn/2019/01/09/%E5%88%A9%E7%94%A8%20Github%20Pages%20%E5%92%8C%20Hexo%20%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/"><strong>常见问题解决</strong></a><br>完整的博客搭建过程的文章汇总：</p><ol><li><a href="http://amosmeer.cn/2019/01/09/%E5%88%A9%E7%94%A8%20Github%20Pages%20%E5%92%8C%20Hexo%20%E5%88%9D%E6%AD%A5%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/">利用 Github Pages 和 Hexo 初步搭建博客</a></li><li><a href="http://amosmeer.cn/2019/01/09/%E5%8D%9A%E5%AE%A2%E7%9A%84%E7%BE%8E%E5%8C%96%E9%85%8D%E7%BD%AE%EF%BC%88NexT%E4%B8%BB%E9%A2%98%EF%BC%89/">博客的美化配置（NexT主题）</a></li><li><a href="http://amosmeer.cn/2019/01/09/%E5%8D%9A%E5%AE%A2%E7%9A%84%E5%8A%9F%E8%83%BD%E9%85%8D%E7%BD%AE/">博客的功能配置</a></li><li><a href="http://amosmeer.cn/2019/01/09/%E5%88%A9%E7%94%A8%20Github%20Pages%20%E5%92%8C%20Hexo%20%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/">利用 Github Pages 和 Hexo 搭建博客常见问题解决</a></li><li><a href="http://amosmeer.cn/2019/01/09/%E5%B8%B8%E8%A7%81%20Hexo%20%E5%91%BD%E4%BB%A4/">常见 Hexo 命令</a></li></ol><h1 id="关于Github"><a href="#关于Github" class="headerlink" title="关于Github"></a>关于Github</h1><h2 id="Github的优点"><a href="#Github的优点" class="headerlink" title="Github的优点"></a>Github的优点</h2><p>GitHub是基于git实现的代码托管。git可能是目前最好用的版本控制系统了，非常受欢迎。<br>GitHub可以免费使用，并且快速稳定。<br>Github上面的世界很精彩，用久了你的眼界会开阔很多。</p><h2 id="Github-Pages"><a href="#Github-Pages" class="headerlink" title="Github Pages"></a>Github Pages</h2><p>Github Pages可以被认为是用户编写的、托管在github上的静态网页。</p><p>Github Pages可以绑定你的域名(但暂时好像只能绑定一个)。<br>简单快捷，使用Github Pages可以为你提供一个免费的服务器，免去了自己搭建服务器和写数据库的麻烦。</p><h1 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h1><h3 id="1-安装Node-js"><a href="#1-安装Node-js" class="headerlink" title="1. 安装Node.js"></a>1. 安装Node.js</h3><p>在 Windows 环境下安装 Node.js 非常简单，仅须到<a href="https://nodejs.org/en/download/" target="_blank" rel="noopener">官网下载</a>安装文件并执行即可完成安装。</p><h3 id="2-安装Git"><a href="#2-安装Git" class="headerlink" title="2. 安装Git"></a>2. 安装Git</h3><p>去<a href="https://git-scm.com/download/win" target="_blank" rel="noopener">Git官网</a>根据你的电脑参数，下载对应版本。</p><p>下载完成，通过在命令行输入 git version 查看是否安装成功，有输出版本号说明安装成功。</p><p>鼠标右键的菜单里就多了 Git GUI Here 和 Git Bash Here 两个按钮，一个是图形界面的Git操作，一个是命令行，我们选择Git Bash Here。<br><img src="https://img-blog.csdnimg.cn/2019011218513464.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0phc21pbmVhaGE=,size_16,color_FFFFFF,t_70" alt=""></p><h1 id="Hexo"><a href="#Hexo" class="headerlink" title="Hexo"></a>Hexo</h1><p>Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。</p><h2 id="1-Hexo安装"><a href="#1-Hexo安装" class="headerlink" title="1. Hexo安装"></a>1. Hexo安装</h2><p>桌面右键鼠标，点击 Git Bash Here，输入 npm 命令即可安装</p><blockquote><p>npm install hexo-cli -g<br>npm install hexo-deployer-git –save</p></blockquote><p>第一句是安装hexo，第二句是安装hexo部署到git page的deployer，两个都需要安装。</p><h2 id="2-初始化配置"><a href="#2-初始化配置" class="headerlink" title="2. 初始化配置"></a>2. 初始化配置</h2><h3 id="创建Hexo文件夹"><a href="#创建Hexo文件夹" class="headerlink" title="创建Hexo文件夹"></a>创建Hexo文件夹</h3><p>安装完成后，根据自己喜好建立目录（如F:\Blog\Hexo），直接进入F:\Blog\Hexo文件夹下右键鼠标，点击Git Bash Here，进入Git命令框，执行以下操作。</p><blockquote><p>$ hexo init</p></blockquote><p>安装 Hexo 完成后，Hexo 将会在指定文件夹中新建所需要的文件。Hexo文件夹下的目录如下：<br><img src="https://img-blog.csdnimg.cn/20190112185514247.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0phc21pbmVhaGE=,size_16,color_FFFFFF,t_70" alt=""></p><h3 id="本地查看效果"><a href="#本地查看效果" class="headerlink" title="本地查看效果"></a>本地查看效果</h3><p>执行下面语句，执行完即可登录localhost:4000查看效果</p><blockquote><p>hexo generate<br>hexo server</p></blockquote><p>登录localhost:4000，即可看到本地的效果如下：<br><img src="https://img-blog.csdnimg.cn/20190112185618486.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0phc21pbmVhaGE=,size_16,color_FFFFFF,t_70" alt=""></p><h3 id="将博客部署到Github-Pages上"><a href="#将博客部署到Github-Pages上" class="headerlink" title="将博客部署到Github Pages上"></a>将博客部署到Github Pages上</h3><h4 id="一-注册Github账户"><a href="#一-注册Github账户" class="headerlink" title="一. 注册Github账户"></a>一. 注册Github账户</h4><ol><li>访问Github首页</li><li>点击右上角的 <a href="https://github.com/" target="_blank" rel="noopener">Sign Up</a>，注册自己的账户点击右上角的 <a href="https://github.com/" target="_blank" rel="noopener">Sign Up</a>，注册自己的账户</li></ol><h4 id="二-创建项目代码库"><a href="#二-创建项目代码库" class="headerlink" title="二. 创建项目代码库"></a>二. 创建项目代码库</h4><ol><li>注册完登陆后，我们就创建一个我们自己的Github Pages项目。点击<a href="https://github.com/new" target="_blank" rel="noopener">New repository</a>。</li><li>创建要点如下：<br><img src="https://img-blog.csdnimg.cn/20190112190346125.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0phc21pbmVhaGE=,size_16,color_FFFFFF,t_70" alt=""></li></ol><h4 id="三-配置SSH密钥"><a href="#三-配置SSH密钥" class="headerlink" title="三. 配置SSH密钥"></a>三. 配置SSH密钥</h4><p>配置Github的SSH密钥可以让本地git项目与远程的github建立联系，让我们在本地写了代码之后直接通过git操作就可以实现本地代码库与Github代码库同步。操作如下：</p><h5 id="看看是否存在SSH密钥-keys"><a href="#看看是否存在SSH密钥-keys" class="headerlink" title="看看是否存在SSH密钥(keys)"></a>看看是否存在SSH密钥(keys)</h5><blockquote><p>$ cd ~/. ssh</p></blockquote><p>检查你本机用户home目录下是否存在.ssh目录<br>如果不存在此目录，则进行第二步操作，否则，你本机已经存在ssh公钥和私钥，可以略过第二步，直接进入第三步操作。</p><h5 id="创建一对新的SSH密钥-keys"><a href="#创建一对新的SSH密钥-keys" class="headerlink" title="创建一对新的SSH密钥(keys)"></a>创建一对新的SSH密钥(keys)</h5><blockquote><p>$ssh-keygen -t rsa -C “<a href="mailto:your_email@example.com" target="_blank" rel="noopener">your_email@example.com</a>“</p></blockquote><p>#这将按照你提供的邮箱地址，创建一对密钥<br>Generating public/private rsa key pair.<br>Enter file in which to save the key (/c/Users/you/.ssh/id_rsa): [Press enter]</p><p>直接回车，则将密钥按默认文件进行存储。此时也可以输入特定的文件名，比如/c/Users/you/.ssh/github_rsa</p><p>接着，根据提示，你需要输入密码和确认密码，如果和我一样比较懒可以不设置密码，直接回车就好。。<del>所谓的最安全的密码，就是没有密码哈哈哈</del> 相关提示如下：</p><blockquote><p>Enter passphrase (empty for no passphrase): [Type a passphrase]<br>Enter same passphrase again: [Type passphrase again]</p></blockquote><p>输入完成之后，屏幕会显示如下信息：</p><p>Your identification has been saved in /c/Users/you/.ssh/id_rsa.<br>Your public key has been saved in /c/Users/you/.ssh/id_rsa.pub.<br>The key fingerprint is:<br>01:0f:f4:3b:ca:85:d6:17:a1:7d:f0:68:9d:f0:a2:db <a href="mailto:your_email@example.com" target="_blank" rel="noopener">your_email@example.com</a></p><h5 id="在GitHub账户中添加公钥"><a href="#在GitHub账户中添加公钥" class="headerlink" title="在GitHub账户中添加公钥"></a>在GitHub账户中添加公钥</h5><p>运行如下命令，将公钥的内容复制到系统粘贴板(clipboard)中。</p><blockquote><p>clip &lt; ~/.ssh/id_rsa.pub</p></blockquote><p>然后：<br><strong>1. 登陆GitHub,进入你的Account Settings.</strong><br><img src="https://img-blog.csdnimg.cn/20190112191425666.png" alt=""></p><p><strong>2. 选择SSH Keys</strong><br><img src="https://img-blog.csdnimg.cn/20190112191807581.png" alt=""></p><p><strong>3. 粘贴密钥，添加即可</strong><br><img src="https://img-blog.csdnimg.cn/20190112191512517.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0phc21pbmVhaGE=,size_16,color_FFFFFF,t_70" alt=""><br><strong>4. 测试是否成功设置</strong></p><blockquote><p>$ ssh -T <a href="mailto:git@github.com" target="_blank" rel="noopener">git@github.com</a></p></blockquote><p>如果收到下面的反馈，直接输入 yes 就好</p><blockquote><p>The authenticity of host ‘github.com (207.97.227.239)’ can’t be established.<br>RSA key fingerprint is 16:27:ac:a5:76:28:2d:36:63:1b:56:4d:eb:df:a6:48.<br>Are you sure you want to continue connecting (yes/no)?</p></blockquote><p><strong>5. 设置用户信息</strong><br>现在你已经可以通过SSH链接到GitHub了，但是还有一些个人信息需要完善。<br>Git会根据用户的名字和邮箱来记录提交。GitHub也是用这些信息来做权限的处理，输入下面的代码进行个人信息的设置，把名称和邮箱替换成你自己的，名字根据自己的喜好自己取，而不是GitHub的昵称。</p><blockquote><p>$ git config –global user.name “AmosMeer”  //你的用户名<br>$ git config –global user.email  “<a href="mailto:amosmeer@gmail.com" target="_blank" rel="noopener">amosmeer@gmail.com</a>“  //你的邮箱</p></blockquote><ol start="6"><li>SSH Key配置成功</li></ol><h5 id="将本地的Hexo文件更新到Github的库中"><a href="#将本地的Hexo文件更新到Github的库中" class="headerlink" title="将本地的Hexo文件更新到Github的库中"></a>将本地的Hexo文件更新到Github的库中</h5><ol><li>登录Github打开自己的项目 username.github.io<br><img src="https://img-blog.csdnimg.cn/20190112192211788.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0phc21pbmVhaGE=,size_16,color_FFFFFF,t_70" alt=""></li><li><p>打开之后，点击SSH，选择SSH类型地址并复制地址<br><img src="https://img-blog.csdnimg.cn/20190112192247706.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0phc21pbmVhaGE=,size_16,color_FFFFFF,t_70" alt=""></p><ol start="3"><li>打开你一开始创建的 Hexo 文件夹（如 F:\Blog\Hexo），用记事本打开刚文件夹下的 _config.yml 文件<br><img src="https://img-blog.csdnimg.cn/2019011219240582.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0phc21pbmVhaGE=,size_16,color_FFFFFF,t_70" alt=""></li></ol></li><li>在配置文件里作如下修改，保存<br><img src="https://img-blog.csdnimg.cn/20190112192653352.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0phc21pbmVhaGE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></li><li>在Hexo文件夹下执行：</li></ol><blockquote><p>hexo g<br>hexo d</p></blockquote><p>或者直接执行：</p><blockquote><p>hexo g -d</p></blockquote><p>执行完之后会让你输入 github 的账号和密码，输入完后就可以部署在 Github Pages 服务器上的博客了。对应的地址是 username.github.io(我的是：AmosMeer.github.io)。</p><ol start="6"><li>在浏览器上输入自己的主页地址<br>在浏览器上输入Github Pager为我们生成的外链（例如我的是：AmosMeer.github.io/，而你的只需要把你的github用户名替换掉这个链接中的 AmosMeer）即可看到自己的博客了。<br>当然，每一个人都可以通过这个地址访问到你的博客了。</li></ol><p>到这为止，博客就初步搭建完成啦！</p><h1 id="关联域名到Github-Pages"><a href="#关联域名到Github-Pages" class="headerlink" title="关联域名到Github Pages"></a>关联域名到Github Pages</h1><h2 id="配置CNAME文件"><a href="#配置CNAME文件" class="headerlink" title="配置CNAME文件"></a>配置CNAME文件</h2><p>在 <code>\hexo\source</code> 文件夹下创建文件 CNAME （新建记事本文件命名CNAME，然后打开）<br>内容为你的域名，例如我的域名是：amosmeer.cn<br><img src="https://img-blog.csdnimg.cn/20190117171658455.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0phc21pbmVhaGE=,size_16,color_FFFFFF,t_70" alt=""><br>在Hexo文件夹提交</p><pre><code>hexo g -d</code></pre><h2 id="修改DNS"><a href="#修改DNS" class="headerlink" title="修改DNS"></a>修改DNS</h2><p>点击域名管理，修改DNS为（一般就是默认值）：</p><pre><code>f1g1ns2.dnspod.net f1g1ns1.dnspod.net </code></pre><p>一般都会有引导，可以点击 “一键修改”</p><h2 id="域名解析"><a href="#域名解析" class="headerlink" title="域名解析"></a>域名解析</h2><ol><li>点击 “域名解析”<br><img src="https://img-blog.csdnimg.cn/20190118201053431.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0phc21pbmVhaGE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></li><li>点击 “添加记录”<img src="https://img-blog.csdnimg.cn/20190118201209786.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0phc21pbmVhaGE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></li><li>记录类型选A，解析记录设置为@。A记录的记录值就是ip地址，github(官方文档)提供了两个IP地址，<code>192.30.252.153</code> 和 <code>192.30.252.154</code>，这两个IP地址为 github 的服务器地址，两个都要填上。<br>再添加一条解析记录，记录类型选 CNAME，解析记录设置为www，线路默认就行。CNAME 记录值填你的github博客网址，例如我的是amosmeer.github.io。<br><img src="https://img-blog.csdnimg.cn/20190118201559396.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0phc21pbmVhaGE=,size_16,color_FFFFFF,t_70" alt=""></li></ol>]]></content>
      
      
      <categories>
          
          <category> 未分类 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>常见Hexo命令</title>
      <link href="/2019/01/09/%E5%B8%B8%E8%A7%81%20Hexo%20%E5%91%BD%E4%BB%A4/"/>
      <url>/2019/01/09/%E5%B8%B8%E8%A7%81%20Hexo%20%E5%91%BD%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<p>欢迎各位大佬来参观我的博客：<strong><a href="http://amosmeer.cn/">AmosMeer’s Blog</a></strong><br>搭建过程中出现的任何问题请参考博客：<a href="http://amosmeer.cn/2019/01/09/%E5%88%A9%E7%94%A8%20Github%20Pages%20%E5%92%8C%20Hexo%20%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/"><strong>常见问题解决</strong></a><br>完整的博客搭建过程的文章汇总：</p><ol><li><a href="http://amosmeer.cn/2019/01/09/%E5%88%A9%E7%94%A8%20Github%20Pages%20%E5%92%8C%20Hexo%20%E5%88%9D%E6%AD%A5%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/">利用 Github Pages 和 Hexo 初步搭建博客</a></li><li><a href="http://amosmeer.cn/2019/01/09/%E5%8D%9A%E5%AE%A2%E7%9A%84%E7%BE%8E%E5%8C%96%E9%85%8D%E7%BD%AE%EF%BC%88NexT%E4%B8%BB%E9%A2%98%EF%BC%89/">博客的美化配置（NexT主题）</a></li><li><a href="http://amosmeer.cn/2019/01/09/%E5%8D%9A%E5%AE%A2%E7%9A%84%E5%8A%9F%E8%83%BD%E9%85%8D%E7%BD%AE/">博客的功能配置</a></li><li><a href="http://amosmeer.cn/2019/01/09/%E5%88%A9%E7%94%A8%20Github%20Pages%20%E5%92%8C%20Hexo%20%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/">利用 Github Pages 和 Hexo 搭建博客常见问题解决</a></li><li><a href="http://amosmeer.cn/2019/01/09/%E5%B8%B8%E8%A7%81%20Hexo%20%E5%91%BD%E4%BB%A4/">常见 Hexo 命令</a></li></ol><p><strong>查看<a href="https://hexo.io/zh-cn/docs/commands.html" target="_blank" rel="noopener">官方文档</a></strong></p><h1 id="指令"><a href="#指令" class="headerlink" title="指令"></a>指令</h1><h2 id="init"><a href="#init" class="headerlink" title="init"></a>init</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo init [folder]</span><br></pre></td></tr></table></figure><p>新建一个网站。如果没有设置 folder ，Hexo 默认在目前的文件夹建立网站。</p><hr><h2 id="new"><a href="#new" class="headerlink" title="new"></a>new</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new [layout]   ==  $ hexo n</span><br></pre></td></tr></table></figure><p>新建一篇文章。如果没有设置 layout 的话，默认使用 _config.yml 中的 default_layout 参数代替。如果标题包含空格的话，请使用引号括起来。</p><hr><h2 id="generate"><a href="#generate" class="headerlink" title="generate"></a>generate</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate  ==  $ hexo g</span><br></pre></td></tr></table></figure><hr><h2 id="publish"><a href="#publish" class="headerlink" title="publish"></a>publish</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo publish [layout] &lt;filename&gt;</span><br></pre></td></tr></table></figure><p>发表草稿。</p><hr><h2 id="server"><a href="#server" class="headerlink" title="server"></a>server</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server  ==  $ hexo s</span><br></pre></td></tr></table></figure><p>启动服务器。默认情况下，访问网址为： <a href="http://localhost:4000/。" target="_blank" rel="noopener">http://localhost:4000/。</a></p><hr><h2 id="deploy"><a href="#deploy" class="headerlink" title="deploy"></a>deploy</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy  ==  $ hexo d</span><br></pre></td></tr></table></figure><p>部署网站。</p><hr><h2 id="render"><a href="#render" class="headerlink" title="render"></a>render</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo render &lt;file1&gt; [file2] ...</span><br></pre></td></tr></table></figure><hr><h2 id="migrate"><a href="#migrate" class="headerlink" title="migrate"></a>migrate</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo migrate &lt;type&gt;</span><br></pre></td></tr></table></figure><p>从其他博客系统 迁移内容。</p><hr><h2 id="clean"><a href="#clean" class="headerlink" title="clean"></a>clean</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo clean</span><br></pre></td></tr></table></figure><p>清除缓存文件 (db.json) 和已生成的静态文件 (public)。</p><p>在某些情况（尤其是更换主题后），如果发现您对站点的更改无论如何也不生效，您可能需要运行该命令。</p><hr><h2 id="list"><a href="#list" class="headerlink" title="list"></a>list</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo list &lt;type&gt;</span><br></pre></td></tr></table></figure><p>列出网站资料。</p><hr><h2 id="version"><a href="#version" class="headerlink" title="version"></a>version</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo version</span><br></pre></td></tr></table></figure><p>显示 Hexo 版本。</p><hr><h1 id="选项"><a href="#选项" class="headerlink" title="选项"></a>选项</h1><h2 id="安全模式"><a href="#安全模式" class="headerlink" title="安全模式"></a>安全模式</h2><blockquote><p>$ hexo –safe</p></blockquote><p>在安全模式下，不会载入插件和脚本。当您在安装新插件遭遇问题时，可以尝试以安全模式重新执行。</p><hr><h2 id="调试模式"><a href="#调试模式" class="headerlink" title="调试模式"></a>调试模式</h2><blockquote><p>$ hexo –debug</p></blockquote><p>在终端中显示调试信息并记录到 debug.log。当您碰到问题时，可以尝试用调试模式重新执行一次，并 提交调试信息到 GitHub。</p><hr><h2 id="简洁模式"><a href="#简洁模式" class="headerlink" title="简洁模式"></a>简洁模式</h2><blockquote><p>$ hexo –silent</p></blockquote><p>隐藏终端信息。</p><hr><h2 id="自定义配置文件的路径"><a href="#自定义配置文件的路径" class="headerlink" title="自定义配置文件的路径"></a>自定义配置文件的路径</h2><blockquote><p>$ hexo –config custom.yml</p></blockquote><p>自定义配置文件的路径，执行后将不再使用 _config.yml。</p><hr><h2 id="显示草稿"><a href="#显示草稿" class="headerlink" title="显示草稿"></a>显示草稿</h2><blockquote><p>$ hexo –draft</p></blockquote><p>显示 source/_drafts 文件夹中的草稿文章。</p><hr><h2 id="自定义-CWD"><a href="#自定义-CWD" class="headerlink" title="自定义 CWD"></a>自定义 CWD</h2><blockquote><p>$ hexo –cwd /path/to/cwd</p></blockquote><p>自定义当前工作目录（Current working directory）的路径。</p>]]></content>
      
      
      <categories>
          
          <category> 未分类 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>博客的功能配置</title>
      <link href="/2019/01/09/%E5%8D%9A%E5%AE%A2%E7%9A%84%E5%8A%9F%E8%83%BD%E9%85%8D%E7%BD%AE/"/>
      <url>/2019/01/09/%E5%8D%9A%E5%AE%A2%E7%9A%84%E5%8A%9F%E8%83%BD%E9%85%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<p>欢迎各位大佬来参观我的博客：<strong><a href="http://amosmeer.cn/">AmosMeer’s Blog</a></strong><br>搭建过程中出现的任何问题请参考博客：<a href="http://amosmeer.cn/2019/01/09/%E5%88%A9%E7%94%A8%20Github%20Pages%20%E5%92%8C%20Hexo%20%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/"><strong>常见问题解决</strong></a><br>完整的博客搭建过程的文章汇总：</p><ol><li><a href="http://amosmeer.cn/2019/01/09/%E5%88%A9%E7%94%A8%20Github%20Pages%20%E5%92%8C%20Hexo%20%E5%88%9D%E6%AD%A5%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/">利用 Github Pages 和 Hexo 初步搭建博客</a></li><li><a href="http://amosmeer.cn/2019/01/09/%E5%8D%9A%E5%AE%A2%E7%9A%84%E7%BE%8E%E5%8C%96%E9%85%8D%E7%BD%AE%EF%BC%88NexT%E4%B8%BB%E9%A2%98%EF%BC%89/">博客的美化配置（NexT主题）</a></li><li><a href="http://amosmeer.cn/2019/01/09/%E5%8D%9A%E5%AE%A2%E7%9A%84%E5%8A%9F%E8%83%BD%E9%85%8D%E7%BD%AE/">博客的功能配置</a></li><li><a href="http://amosmeer.cn/2019/01/09/%E5%88%A9%E7%94%A8%20Github%20Pages%20%E5%92%8C%20Hexo%20%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/">利用 Github Pages 和 Hexo 搭建博客常见问题解决</a></li><li><a href="http://amosmeer.cn/2019/01/09/%E5%B8%B8%E8%A7%81%20Hexo%20%E5%91%BD%E4%BB%A4/">常见 Hexo 命令</a></li></ol><p>主要有以下功能配置：</p><ol><li>添加「标签」页面</li><li>添加「分类」页面</li><li>添加「关于」页面</li><li>用hexo发表新文章</li></ol><h1 id="1-添加「标签」页面"><a href="#1-添加「标签」页面" class="headerlink" title="1.添加「标签」页面"></a>1.添加「标签」页面</h1><p>新建页面</p><pre><code>hexo new page tags</code></pre><p>修改站点目录下 <code>source/tags</code> 的 index.md 文件如下：</p><pre><code>---title: tagstype: &quot;tags&quot;comments: false---</code></pre><p>修改主题配置文件，取消 <code>#tags: /tags</code> 这行注释，内容如下</p><pre><code># 菜单示例配置menu:  home: /  archives: /archives  #about: /about  #categories: /categories  tags: /tags  #commonweal: /404.html</code></pre><p>新建测试文章，在新文章的头部添加tags信息，如下：</p><pre><code>title: 测试文章tags:  - Testing  - Another Tag---</code></pre><h1 id="2-添加「分类」页面"><a href="#2-添加「分类」页面" class="headerlink" title="2.添加「分类」页面"></a>2.添加「分类」页面</h1><p>新建页面</p><pre><code>hexo new page categories</code></pre><p>修改站点目录下 source/categories 的 index.md 文如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: categories</span><br><span class="line">type: &quot;categories&quot;</span><br><span class="line">comments: false</span><br><span class="line">---</span><br></pre></td></tr></table></figure><p>修改主题配置文件，取消 <code>#categories: /categories</code> 这行注释，内容如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># 菜单示例配置</span><br><span class="line">menu:</span><br><span class="line">  home: /</span><br><span class="line">  archives: /archives</span><br><span class="line">  #about: /about</span><br><span class="line">  categories: /categories</span><br><span class="line">  tags: /tags</span><br><span class="line">  #commonweal: /404.html</span><br></pre></td></tr></table></figure><p>在刚才测试的文章里面添加</p><pre><code>title: 测试文章tags:  - Testing  - Another Tagcategories: Testing---</code></pre><h1 id="3-添加「关于」页面"><a href="#3-添加「关于」页面" class="headerlink" title="3.添加「关于」页面"></a>3.添加「关于」页面</h1><p>新建页面</p><pre><code>hexo new page about</code></pre><p>修改主题配置文件，取消 <code>#about: /about</code> 这行注释，内容如下</p><pre><code># 菜单示例配置menu:  home: /  archives: /archives  about: /about  categories: /categories  tags: /tags  #commonweal: /404.html</code></pre><p>编辑站点目录下 <code>source/about</code> 的 <code>index.md</code> 文件内容，内容将显示在关于页面。</p><h1 id="4-用hexo发表新文章"><a href="#4-用hexo发表新文章" class="headerlink" title="4. 用hexo发表新文章"></a>4. 用hexo发表新文章</h1><pre><code>$ hexo n &quot;文章标题&quot; </code></pre><p>执行命令 <code>hexo n &quot;test&quot;</code> 后，会在项目 <code>\Hexo\source_posts</code> 中生成 我的家.md文件，用编辑器打开编写即可。</p><p>当然，也可以直接在\Hexo\source_posts中新建一个md文件，写完后，推送到服务器上，执行以下命令即可在我们的站点看到新的文章。</p><pre><code>$ hexo g #生成$ hexo d #部署 # 可与hexo g合并为 hexo d -g</code></pre>]]></content>
      
      
      <categories>
          
          <category> 未分类 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>博客的美化配置（NexT主题）</title>
      <link href="/2019/01/09/%E5%8D%9A%E5%AE%A2%E7%9A%84%E7%BE%8E%E5%8C%96%E9%85%8D%E7%BD%AE%EF%BC%88NexT%E4%B8%BB%E9%A2%98%EF%BC%89/"/>
      <url>/2019/01/09/%E5%8D%9A%E5%AE%A2%E7%9A%84%E7%BE%8E%E5%8C%96%E9%85%8D%E7%BD%AE%EF%BC%88NexT%E4%B8%BB%E9%A2%98%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<p>欢迎各位大佬来参观我的博客：<strong><a href="http://amosmeer.cn/">AmosMeer’s Blog</a></strong><br>搭建过程中出现的任何问题请参考博客：<a href="http://amosmeer.cn/2019/01/09/%E5%88%A9%E7%94%A8%20Github%20Pages%20%E5%92%8C%20Hexo%20%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/"><strong>常见问题解决</strong></a><br>完整的博客搭建过程的文章汇总：</p><ol><li><a href="http://amosmeer.cn/2019/01/09/%E5%88%A9%E7%94%A8%20Github%20Pages%20%E5%92%8C%20Hexo%20%E5%88%9D%E6%AD%A5%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/">利用 Github Pages 和 Hexo 初步搭建博客</a></li><li><a href="http://amosmeer.cn/2019/01/09/%E5%8D%9A%E5%AE%A2%E7%9A%84%E7%BE%8E%E5%8C%96%E9%85%8D%E7%BD%AE%EF%BC%88NexT%E4%B8%BB%E9%A2%98%EF%BC%89/">博客的美化配置（NexT主题）</a></li><li><a href="http://amosmeer.cn/2019/01/09/%E5%8D%9A%E5%AE%A2%E7%9A%84%E5%8A%9F%E8%83%BD%E9%85%8D%E7%BD%AE/">博客的功能配置</a></li><li><a href="http://amosmeer.cn/2019/01/09/%E5%88%A9%E7%94%A8%20Github%20Pages%20%E5%92%8C%20Hexo%20%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/">利用 Github Pages 和 Hexo 搭建博客常见问题解决</a></li><li><a href="http://amosmeer.cn/2019/01/09/%E5%B8%B8%E8%A7%81%20Hexo%20%E5%91%BD%E4%BB%A4/">常见 Hexo 命令</a></li></ol><p>主要有一下 23 种配置：</p><ol><li>在右上角或者左上角实现 fork me on github</li><li>修改文章内链接文本样式</li><li>修改底部标签样式</li><li>在文章末尾添加“文章结束”标记</li><li>设置头像并设置动画效果</li><li>修改代码块自定义样式</li><li>侧边栏社交小图标设置</li><li>主页文章添加阴影效果</li><li>网站底部加访问量（待完成）</li><li>添加热度（待完成）</li><li>网站底部加上字数统计和阅读时长</li><li>设置网站的图标Favicon12</li><li>实现文章统计功能</li><li>添加网页顶部进度加载条</li><li>底部隐藏由Hexo强力驱动、主题–NexT.Mist</li><li>博文置顶</li><li>添加站内搜索</li><li>在文章底部增加版权信息</li><li>添加侧栏推荐阅读</li><li>添加底部桃心</li><li>添加DaoVoice在线联系</li><li>博客加上萌萌的宠物</li><li>首页文章只显示预览</li></ol><h1 id="从-Hexo-的官网选取主题"><a href="#从-Hexo-的官网选取主题" class="headerlink" title="从 Hexo 的官网选取主题"></a>从 <a href="https://hexo.io/themes/" target="_blank" rel="noopener">Hexo 的官网</a>选取主题</h1><h2 id="1-选取主题"><a href="#1-选取主题" class="headerlink" title="1.选取主题"></a>1.选取主题</h2><p>可以选择喜欢的主题，点击进入到它的 github 地址，只需要把 GitHub 的地址复制下来即可。<br>我选择的主题为：hexo-theme-next，所以下面的配置也会以 next 为例。<br><img src="https://img-blog.csdnimg.cn/20190112231546416.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0phc21pbmVhaGE=,size_16,color_FFFFFF,t_70" alt=""></p><h2 id="2-克隆主题"><a href="#2-克隆主题" class="headerlink" title="2.克隆主题"></a>2.克隆主题</h2><p>再打开Hexo文件夹下的themes目录（F:\Blog\hexo\themes），右键Git Bash，在命令行输入:</p><blockquote><p>git clone <a href="https://github.com/theme-next/hexo-theme-next" target="_blank" rel="noopener">https://github.com/theme-next/hexo-theme-next</a>  (此处地址替换成你需要使用的主题的地址) </p></blockquote><p>然后等待下载完成</p><h2 id="3-修改Hexo配置文件"><a href="#3-修改Hexo配置文件" class="headerlink" title="3.修改Hexo配置文件"></a>3.修改Hexo配置文件</h2><p>下载完成后，打开Hexo文件夹下的配置文件_config.yml</p><p>修改参数为：<code>theme: hexo-theme-next</code></p><h2 id="4-部署主题，本地查看效果"><a href="#4-部署主题，本地查看效果" class="headerlink" title="4.部署主题，本地查看效果"></a>4.部署主题，本地查看效果</h2><p>返回Hexo目录，右键Git Bash，输入</p><blockquote><p>hexo g<br>hexo s</p></blockquote><p>打开浏览器，输入 <a href="http://localhost:4000/" target="_blank" rel="noopener">http://localhost:4000/</a> 即可看见更换后的新主题<br><img src="https://img-blog.csdnimg.cn/20190112232235944.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0phc21pbmVhaGE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="部署到-Github"><a href="#部署到-Github" class="headerlink" title="部署到 Github"></a>部署到 Github</h2><p>如果效果满意，就可以将它部署到 Github 上<br>打开 Hexo 文件夹，右键 Git Bash，输入</p><blockquote><p>hexo clean   (必须要，不然有时因为缓存问题，服务器更新不了主题)<br>hexo g -d</p></blockquote><h2 id="查看"><a href="#查看" class="headerlink" title="查看"></a>查看</h2><p>打开自己的主页，即可看到修改后的效果<br>更多修改效果请查看对应主题的说明文档，点击此查看本主题(Next)对应的<a href="http://theme-next.iissnan.com/getting-started.html" target="_blank" rel="noopener">说明文档</a>。</p><h1 id="进一步美化主题（NexT）"><a href="#进一步美化主题（NexT）" class="headerlink" title="进一步美化主题（NexT）"></a>进一步美化主题（NexT）</h1><p>根据 NexT 官方文档中的 <a href="http://theme-next.iissnan.com/getting-started.html" target="_blank" rel="noopener">开始使用</a> 下的流程就可以完成初步的配置</p><h2 id="1-在右上角或者左上角实现-fork-me-on-github"><a href="#1-在右上角或者左上角实现-fork-me-on-github" class="headerlink" title="1. 在右上角或者左上角实现 fork me on github"></a>1. 在右上角或者左上角实现 fork me on github</h2><p>效果图如下图所示：<br><img src="https://img-blog.csdnimg.cn/20190112233813136.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0phc21pbmVhaGE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>在 <a href="https://github.com/blog/273-github-ribbons" target="_blank" rel="noopener">GitHub Ribbons</a> 或 <a href="http://tholman.com/github-corners/" target="_blank" rel="noopener">GitHub Corners</a> 选择一款你喜欢的挂饰，拷贝方框内的代码：<br><img src="https://img-blog.csdnimg.cn/20190112234027354.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0phc21pbmVhaGE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>将刚刚复制的挂饰代码，添加到 <code>Blog/themes/next/layout/_layout.swig</code> 文件中，添加位置如下图所示(放在 <code>&lt;div class=&quot;headband&quot;&gt;&lt;/div&gt;</code> 下方)：<br><img src="https://img-blog.csdnimg.cn/20190112234644569.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0phc21pbmVhaGE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="2-修改文章内链接文本样式"><a href="#2-修改文章内链接文本样式" class="headerlink" title="2. 修改文章内链接文本样式"></a>2. 修改文章内链接文本样式</h2><p>修改 <code>Blog/themes/next/source/css/_common/components/post/post.styl</code> ，在末尾添加 CSS 样式：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">// 文章内链接文本样式</span><br><span class="line">.post-body p a&#123;</span><br><span class="line">  color: #0593d3; //原始链接颜色</span><br><span class="line">  border-bottom: none;</span><br><span class="line">  border-bottom: 1px solid #0593d3; //底部分割线颜色</span><br><span class="line">  &amp;:hover &#123;</span><br><span class="line">    color: #fc6423; //鼠标经过颜色</span><br><span class="line">    border-bottom: none;</span><br><span class="line">    border-bottom: 1px solid #fc6423; //底部分割线颜色</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>设置后，效果如下：<br><img src="https://img-blog.csdnimg.cn/2019011223564166.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0phc21pbmVhaGE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="3-修改底部标签样式"><a href="#3-修改底部标签样式" class="headerlink" title="3. 修改底部标签样式"></a>3. 修改底部标签样式</h2><p>记事本打开 <code>Blog\themes\next\layout\_macro\post.swig</code> 文件<br><strong>command+f</strong> 搜索 <code>rel=&quot;tag&quot;&gt;#</code>，将 <strong>#</strong> 替换成 <code>&lt;i class=&quot;fa fa-tag&quot;&gt;&lt;/i&gt;</code><br><img src="https://img-blog.csdnimg.cn/20190113000242464.png" alt="在这里插入图片描述"></p><h2 id="4-在文章末尾添加“文章结束”标记"><a href="#4-在文章末尾添加“文章结束”标记" class="headerlink" title="4. 在文章末尾添加“文章结束”标记"></a>4. 在文章末尾添加“文章结束”标记</h2><p>路径 <code>Blog\themes\next\layout\_macro</code> 文件夹中新建 <code>passage-end-tag.swig</code> 文件<br>或者使用以下命令创建：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">//切换到路径_macro</span><br><span class="line">cd [_macro路径]</span><br><span class="line"></span><br><span class="line">//创建passage-end-tag.swig文件</span><br><span class="line">touch passage-end-tag.swig</span><br></pre></td></tr></table></figure></p><p>在<code>passage-end-tag.swig</code>添加以下内容，直接用文本编辑器打开，粘贴以下内容后保存</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    &#123;% if not is_index %&#125;</span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"text-align:center;color: #ccc;font-size:14px;"</span>&gt;</span>-------------本文结束 <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"fa fa-paw"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span> 感谢您的阅读-------------<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    &#123;% endif %&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>打开 <code>Blog\themes\next\layout\_macro\post.swig</code>，在 <code>post-body</code> 之后， <code>post-footer</code> 之前（post-footer之前两个DIV），添加以下代码：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">  &#123;% if not is_index %&#125;</span><br><span class="line">    &#123;% include 'passage-end-tag.swig' %&#125;</span><br><span class="line">  &#123;% endif %&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>添加位置如下：<br><img src="https://img-blog.csdnimg.cn/20190113001733892.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0phc21pbmVhaGE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>修改主题配置文件<code>_config.yml</code>，在末尾添加：</p><pre><code># 文章末尾添加“本文结束”标记passage_end_tag:  enabled: true</code></pre><p>配置完成之后，效果如下：<br><img src="https://img-blog.csdnimg.cn/20190113003701169.png" alt="在这里插入图片描述"></p><h2 id="5-设置头像并设置动画效果"><a href="#5-设置头像并设置动画效果" class="headerlink" title="5.设置头像并设置动画效果"></a>5.设置头像并设置动画效果</h2><p>在 <code>Blog/_config.yml</code> 中添加头像链接地址：</p><pre><code>//添加头像地址avatar: [ http://....]</code></pre><p>设置头像圆角并旋转，打开 <code>Blog/themes/next/source/css/_common/components/sidebar/sidebar-author.styl</code>，添加以下代码：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.site-author-image</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: block;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span> auto;</span><br><span class="line">  <span class="attribute">padding</span>: $site-author-image-padding;</span><br><span class="line">  <span class="attribute">max-width</span>: $site-author-image-width;</span><br><span class="line">  <span class="attribute">height</span>: $site-author-image-height;</span><br><span class="line">  <span class="attribute">border</span>: $site-author-image-border-width solid $site-author-image-border-color;</span><br><span class="line">  <span class="comment">/* 头像圆形 */</span></span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">80px</span>;</span><br><span class="line">  <span class="attribute">-webkit-border-radius</span>: <span class="number">80px</span>;</span><br><span class="line">  <span class="attribute">-moz-border-radius</span>: <span class="number">80px</span>;</span><br><span class="line">  <span class="attribute">box-shadow</span>: inset <span class="number">0</span> -<span class="number">1px</span> <span class="number">0</span> <span class="number">#333</span>sf;</span><br><span class="line">  <span class="comment">/* 设置循环动画 [animation: (play)动画名称 (2s)动画播放时长单位秒或微秒 (ase-out)动画播放的速度曲线为以低速结束 </span></span><br><span class="line"><span class="comment">    (1s)等待1秒然后开始动画 (1)动画播放次数(infinite为循环播放) ]*/</span></span><br><span class="line"> </span><br><span class="line">  <span class="comment">/* 鼠标经过头像旋转360度 */</span></span><br><span class="line">  <span class="attribute">-webkit-transition</span>: -webkit-transform <span class="number">1.0s</span> ease-out;</span><br><span class="line">  <span class="attribute">-moz-transition</span>: -moz-transform <span class="number">1.0s</span> ease-out;</span><br><span class="line">  <span class="attribute">transition</span>: transform <span class="number">1.0s</span> ease-out;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">img</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">  <span class="comment">/* 鼠标经过停止头像旋转 </span></span><br><span class="line"><span class="comment">  -webkit-animation-play-state:paused;</span></span><br><span class="line"><span class="comment">  animation-play-state:paused;*/</span></span><br><span class="line">  <span class="comment">/* 鼠标经过头像旋转360度 */</span></span><br><span class="line">  <span class="attribute">-webkit-transform</span>: <span class="built_in">rotateZ</span>(360deg);</span><br><span class="line">  <span class="attribute">-moz-transform</span>: <span class="built_in">rotateZ</span>(360deg);</span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">rotateZ</span>(360deg);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* Z 轴旋转动画 */</span></span><br><span class="line">@-<span class="keyword">webkit</span>-<span class="keyword">keyframes</span> play &#123;</span><br><span class="line">  0% &#123;</span><br><span class="line">    <span class="attribute">-webkit-transform</span>: <span class="built_in">rotateZ</span>(0deg);</span><br><span class="line">  &#125;</span><br><span class="line">  100% &#123;</span><br><span class="line">    <span class="attribute">-webkit-transform</span>: <span class="built_in">rotateZ</span>(-360deg);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">@-<span class="keyword">moz</span>-<span class="keyword">keyframes</span> play &#123;</span><br><span class="line">  0% &#123;</span><br><span class="line">    <span class="attribute">-moz-transform</span>: <span class="built_in">rotateZ</span>(0deg);</span><br><span class="line">  &#125;</span><br><span class="line">  100% &#123;</span><br><span class="line">    <span class="attribute">-moz-transform</span>: <span class="built_in">rotateZ</span>(-360deg);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">@<span class="keyword">keyframes</span> play &#123;</span><br><span class="line">  0% &#123;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">rotateZ</span>(0deg);</span><br><span class="line">  &#125;</span><br><span class="line">  100% &#123;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">rotateZ</span>(-360deg);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="6-修改代码块自定义样式"><a href="#6-修改代码块自定义样式" class="headerlink" title="6.修改代码块自定义样式"></a>6.修改代码块自定义样式</h2><p>打开<code>Blog\themes\next\source\css\_custom\custom.styl</code>，添加以下代码：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">// Custom styles.</span><br><span class="line"><span class="selector-tag">code</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#ff7600</span>;</span><br><span class="line">    <span class="attribute">background</span>: <span class="number">#fbf7f8</span>;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">2px</span>;</span><br><span class="line">&#125;</span><br><span class="line">// 大代码块的自定义样式</span><br><span class="line"><span class="selector-class">.highlight</span>, <span class="selector-tag">pre</span> &#123;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">5px</span> <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">5px</span>;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">3px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.highlight</span>, <span class="selector-tag">code</span>, <span class="selector-tag">pre</span> &#123;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#d6d6d6</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="7-侧边栏社交小图标设置"><a href="#7-侧边栏社交小图标设置" class="headerlink" title="7.侧边栏社交小图标设置"></a>7.侧边栏社交小图标设置</h2><p>打开主题配置文件<code>_config.yml</code>，<code>command+f</code>搜索 <strong>Social</strong>，将你有的社交账号前面的 # 号去掉。<br>格式为：</p><blockquote><p>[社交平台名]: [社交地址] || [图标名称]</p></blockquote><p><img src="https://img-blog.csdnimg.cn/20190113012619561.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0phc21pbmVhaGE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>效果如下：<br><img src="https://img-blog.csdnimg.cn/20190113005520803.png" alt="在这里插入图片描述"><br>图标可以去<a href="https://fontawesome.com/icons?from=io" target="_blank" rel="noopener">Font Awesome Icon</a>网站去找，找到后复制名字到相应的位置即可。</p><h2 id="8-主页文章添加阴影效果"><a href="#8-主页文章添加阴影效果" class="headerlink" title="8.主页文章添加阴影效果"></a>8.主页文章添加阴影效果</h2><p>打开<code>Blog\themes\next\source\css\_custom\custom.styl</code>，添加以下代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">// 主页文章添加阴影效果</span><br><span class="line"> .post &#123;</span><br><span class="line">   margin-top: 60px;</span><br><span class="line">   margin-bottom: 60px;</span><br><span class="line">   padding: 25px;</span><br><span class="line">   -webkit-box-shadow: 0 0 5px rgba(202, 203, 203, .5);</span><br><span class="line">   -moz-box-shadow: 0 0 5px rgba(202, 203, 204, .5);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>效果如下：<br><img src="https://img-blog.csdnimg.cn/20190113005945676.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0phc21pbmVhaGE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="9-网站底部加上访问量（待完成）"><a href="#9-网站底部加上访问量（待完成）" class="headerlink" title="9.网站底部加上访问量（待完成）"></a>9.网站底部加上访问量（待完成）</h2><h2 id="10-添加热度（待完成）"><a href="#10-添加热度（待完成）" class="headerlink" title="10.添加热度（待完成）"></a>10.添加热度（待完成）</h2><h2 id="11-网站底部字数统计和阅读时长"><a href="#11-网站底部字数统计和阅读时长" class="headerlink" title="11.网站底部字数统计和阅读时长"></a>11.网站底部字数统计和阅读时长</h2><p>打开<code>\themes\next\layout\_partials\footer.swig</code>文件,在copyright前加上画红线这句话：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script async src=&quot;https://busuanzi.ibruce.info/busuanzi/2.3/busuanzi.pure.mini.js&quot;&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20190113134356722.png" alt="在这里插入图片描述"></p><p>然后再合适的位置添加显示统计的代码，如图：<br><img src="https://img-blog.csdnimg.cn/20190113134433589.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0phc21pbmVhaGE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class=&quot;powered-by&quot;&gt;</span><br><span class="line">&lt;i class=&quot;fa fa-user-md&quot;&gt;&lt;/i&gt;&lt;span id=&quot;busuanzi_container_site_uv&quot;&gt;</span><br><span class="line">  本站访客数:&lt;span id=&quot;busuanzi_value_site_uv&quot;&gt;&lt;/span&gt;</span><br><span class="line">&lt;/span&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><p>在这里有两中不同计算方式的统计代码：</p><ol><li>pv的方式，单个用户连续点击n篇文章，记录n次访问量</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;span id=&quot;busuanzi_container_site_pv&quot;&gt;</span><br><span class="line">    本站总访问量&lt;span id=&quot;busuanzi_value_site_pv&quot;&gt;&lt;/span&gt;次</span><br><span class="line">&lt;/span&gt;</span><br></pre></td></tr></table></figure><ol start="2"><li>uv的方式，单个用户连续点击n篇文章，只记录1次访客数</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;span id=&quot;busuanzi_container_site_uv&quot;&gt;</span><br><span class="line">  本站总访问量&lt;span id=&quot;busuanzi_value_site_uv&quot;&gt;&lt;/span&gt;次</span><br><span class="line">&lt;/span&gt;</span><br></pre></td></tr></table></figure><h2 id="12-设置网站的图标Favicon"><a href="#12-设置网站的图标Favicon" class="headerlink" title="12.设置网站的图标Favicon"></a>12.设置网站的图标Favicon</h2><p>在图标网站找一张你喜欢的图标（大：32x32 小：16x16），图标网站：<a href="https://www.easyicon.net/" target="_blank" rel="noopener">easyicon</a>或者<a href="https://www.iconfont.cn/" target="_blank" rel="noopener">阿里巴巴矢量图标库</a>。将下载下来的小图和中图放在<code>Blog/themes/next/source/images</code>，将默认的两张图片替换掉。</p><p>如果你自定义了图片名字，需要修改主题配置文件：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># For example, you put your favicons into `hexo-site/source/images` directory.</span><br><span class="line"># Then need to rename &amp; redefine they on any other names, otherwise icons from Next will rewrite your custom icons in Hexo.</span><br><span class="line">favicon:</span><br><span class="line">  small: /images/favicon-16x16-next.png  //16X16小图</span><br><span class="line">  medium: /images/favicon-32x32-next.png  //32X32大图</span><br><span class="line">  apple_touch_icon: /images/apple-touch-icon-next.png  //apple-touch-icon </span><br><span class="line">  safari_pinned_tab: /images/logo.svg </span><br><span class="line">  #android_manifest: /images/manifest.json</span><br><span class="line">  #ms_browserconfig: /images/browserconfig.xml</span><br></pre></td></tr></table></figure></p><p>修改后，效果如下：<br><img src="https://img-blog.csdnimg.cn/20190113011854285.png" alt="在这里插入图片描述"></p><h2 id="13-实现文章统计功能"><a href="#13-实现文章统计功能" class="headerlink" title="13.实现文章统计功能"></a>13.实现文章统计功能</h2><p>安装 hexo-symbols-count-time，命令如下：</p><pre><code>npm install hexo-symbols-count-time --save</code></pre><p>在站点配置文件 <code>hexo _config.yaml</code>添加：<br>（注意：修改此配置需要重启服务才能更新）<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">symbols_count_time:</span><br><span class="line">  symbols: true # 文章字数</span><br><span class="line">  time: true # 阅读时长</span><br><span class="line">  total_symbols: true # 所有文章总字数</span><br><span class="line">  total_time: true # 所有文章阅读中时长</span><br></pre></td></tr></table></figure></p><p>在主题配置文件 <code>next _config.yaml</code>添加：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">symbols_count_time:</span><br><span class="line">  separated_meta: true  # 是否换行显示 字数统计 及 阅读时长</span><br><span class="line">  item_text_post: true  # 文章 字数统计 阅读时长 使用图标 还是 文本表示</span><br><span class="line">  item_text_total: false # 博客底部统计 字数统计 阅读时长 使用图标 还是 文本表示</span><br><span class="line">  awl: 4</span><br><span class="line">  wpm: 275</span><br></pre></td></tr></table></figure></p><p>具体可查看 <a href="https://github.com/theme-next/hexo-symbols-count-time" target="_blank" rel="noopener">symbols_count_time</a><br>效果图：<br><img src="https://img-blog.csdnimg.cn/20190113015403658.png" alt="在这里插入图片描述"></p><h2 id="14-添加网页顶部进度加载条"><a href="#14-添加网页顶部进度加载条" class="headerlink" title="14.添加网页顶部进度加载条"></a>14.添加网页顶部进度加载条</h2><p>编辑主题配置文件，command+F 搜索 pace，将其值改为 ture 就可以了。</p><h2 id="15-底部隐藏由Hexo强力驱动、主题–NexT-Mist"><a href="#15-底部隐藏由Hexo强力驱动、主题–NexT-Mist" class="headerlink" title="15.底部隐藏由Hexo强力驱动、主题–NexT.Mist"></a>15.底部隐藏由Hexo强力驱动、主题–NexT.Mist</h2><p>打开<code>Blog/themes/next/layout/_partials/footer.swig</code>，注释掉相应代码。<br><img src="https://img-blog.csdnimg.cn/20190113132014381.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0phc21pbmVhaGE=,size_16,color_FFFFFF,t_70" alt=""></p><h2 id="16-博文置顶"><a href="#16-博文置顶" class="headerlink" title="16.博文置顶"></a>16.博文置顶</h2><p>修改<code>hexo-generator-index</code>插件，把<code>node_modules/hexo-generator-index/lib/generator.js</code>中代码替换为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">&apos;use strict&apos;;</span><br><span class="line">var pagination = require(&apos;hexo-pagination&apos;);</span><br><span class="line">module.exports = function(locals)&#123;</span><br><span class="line">  var config = this.config;</span><br><span class="line">  var posts = locals.posts;</span><br><span class="line">    posts.data = posts.data.sort(function(a, b) &#123;</span><br><span class="line">        if(a.top &amp;&amp; b.top) &#123; // 两篇文章top都有定义</span><br><span class="line">            if(a.top == b.top) return b.date - a.date; // 若top值一样则按照文章日期降序排</span><br><span class="line">            else return b.top - a.top; // 否则按照top值降序排</span><br><span class="line">        &#125;</span><br><span class="line">        else if(a.top &amp;&amp; !b.top) &#123; // 以下是只有一篇文章top有定义，那么将有top的排在前面（这里用异或操作居然不行233）</span><br><span class="line">            return -1;</span><br><span class="line">        &#125;</span><br><span class="line">        else if(!a.top &amp;&amp; b.top) &#123;</span><br><span class="line">            return 1;</span><br><span class="line">        &#125;</span><br><span class="line">        else return b.date - a.date; // 都没定义按照文章日期降序排</span><br><span class="line">    &#125;);</span><br><span class="line">  var paginationDir = config.pagination_dir || &apos;page&apos;;</span><br><span class="line">  return pagination(&apos;&apos;, posts, &#123;</span><br><span class="line">    perPage: config.index_generator.per_page,</span><br><span class="line">    layout: [&apos;index&apos;, &apos;archive&apos;],</span><br><span class="line">    format: paginationDir + &apos;/%d/&apos;,</span><br><span class="line">    data: &#123;</span><br><span class="line">      __index: true</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>文章添加Top值，值越大，越靠前：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: Hexo-NexT主题配置</span><br><span class="line">date: 2018-01-20 20:41:08</span><br><span class="line">categories: Hexo</span><br><span class="line">tags:</span><br><span class="line">- Hexo</span><br><span class="line">- NexT</span><br><span class="line">top: 100</span><br><span class="line">---</span><br></pre></td></tr></table></figure><h2 id="17-添加站内搜索"><a href="#17-添加站内搜索" class="headerlink" title="17.添加站内搜索"></a>17.添加站内搜索</h2><p>NexT主题支持集成 Swiftype、 微搜索、Local Search 和 Algolia。下面介绍Local Search的安装。<br>安装 hexo-generator-search</p><pre><code>npm install hexo-generator-search --save</code></pre><p>安装 hexo-generator-searchdb</p><pre><code>npm install hexo-generator-searchdb --save</code></pre><p>编辑<strong>站点配置文件</strong>，添加以下内容</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">search:</span><br><span class="line">  path: search.xml</span><br><span class="line">  field: post</span><br><span class="line">  format: html</span><br><span class="line">  limit: 10000</span><br></pre></td></tr></table></figure><p>编辑主题配置文件，设置 <code>Local searchenable</code> 为 ture<br>效果如下图所示：<br><img src="https://img-blog.csdnimg.cn/20190113124923711.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0phc21pbmVhaGE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="18-在文章底部增加版权信息"><a href="#18-在文章底部增加版权信息" class="headerlink" title="18.在文章底部增加版权信息"></a>18.在文章底部增加版权信息</h2><p>在目录<code>Blog/themes/next/layout/_macro/</code>，添加文件 <code>my-copyright.swig</code>，内容如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">&#123;% if page.copyright %&#125;</span><br><span class="line">&lt;div class=&quot;my_post_copyright&quot;&gt;</span><br><span class="line">  &lt;script src=&quot;//cdn.bootcss.com/clipboard.js/1.5.10/clipboard.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">  </span><br><span class="line">  &lt;!-- JS库 sweetalert 可修改路径 --&gt;</span><br><span class="line">  &lt;script src=&quot;https://cdn.bootcss.com/jquery/2.0.0/jquery.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">  &lt;script src=&quot;https://unpkg.com/sweetalert/dist/sweetalert.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">  &lt;p&gt;&lt;span&gt;本文标题:&lt;/span&gt;&lt;a href=&quot;&#123;&#123; url_for(page.path) &#125;&#125;&quot;&gt;&#123;&#123; page.title &#125;&#125;&lt;/a&gt;&lt;/p&gt;</span><br><span class="line">  &lt;p&gt;&lt;span&gt;文章作者:&lt;/span&gt;&lt;a href=&quot;/&quot; title=&quot;访问 &#123;&#123; theme.author &#125;&#125; 的个人博客&quot;&gt;&#123;&#123; theme.author &#125;&#125;&lt;/a&gt;&lt;/p&gt;</span><br><span class="line">  &lt;p&gt;&lt;span&gt;发布时间:&lt;/span&gt;&#123;&#123; page.date.format(&quot;YYYY年MM月DD日 - HH:MM&quot;) &#125;&#125;&lt;/p&gt;</span><br><span class="line">  &lt;p&gt;&lt;span&gt;最后更新:&lt;/span&gt;&#123;&#123; page.updated.format(&quot;YYYY年MM月DD日 - HH:MM&quot;) &#125;&#125;&lt;/p&gt;</span><br><span class="line">  &lt;p&gt;&lt;span&gt;原始链接:&lt;/span&gt;&lt;a href=&quot;&#123;&#123; url_for(page.path) &#125;&#125;&quot; title=&quot;&#123;&#123; page.title &#125;&#125;&quot;&gt;&#123;&#123; page.permalink &#125;&#125;&lt;/a&gt;</span><br><span class="line">    &lt;span class=&quot;copy-path&quot;  title=&quot;点击复制文章链接&quot;&gt;&lt;i class=&quot;fa fa-clipboard&quot; data-clipboard-text=&quot;&#123;&#123; page.permalink &#125;&#125;&quot;  aria-label=&quot;复制成功！&quot;&gt;&lt;/i&gt;&lt;/span&gt;</span><br><span class="line">  &lt;/p&gt;</span><br><span class="line">  &lt;p&gt;&lt;span&gt;许可协议:&lt;/span&gt;&lt;i class=&quot;fa fa-creative-commons&quot;&gt;&lt;/i&gt; &lt;a rel=&quot;license&quot; href=&quot;https://creativecommons.org/licenses/by-nc-nd/4.0/&quot; target=&quot;_blank&quot; title=&quot;Attribution-NonCommercial-NoDerivatives 4.0 International (CC BY-NC-ND 4.0)&quot;&gt;署名-非商业性使用-禁止演绎 4.0 国际&lt;/a&gt; 转载请保留原文链接及作者。&lt;/p&gt;  </span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;script&gt; </span><br><span class="line">    var clipboard = new Clipboard(&apos;.fa-clipboard&apos;);</span><br><span class="line">    $(&quot;.fa-clipboard&quot;).click(function()&#123;</span><br><span class="line">      clipboard.on(&apos;success&apos;, function()&#123;</span><br><span class="line">        swal(&#123;   </span><br><span class="line">          title: &quot;&quot;,   </span><br><span class="line">          text: &apos;复制成功&apos;,</span><br><span class="line">          icon: &quot;success&quot;, </span><br><span class="line">          showConfirmButton: true</span><br><span class="line">          &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">    &#125;);  </span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&#123;% endif %&#125;</span><br></pre></td></tr></table></figure></p><p>在目录<code>Blog/themes/next/source/css/_common/components/post/</code>下添加文件<code>my-post-copyright.styl</code>，添加以下代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">.my_post_copyright &#123;</span><br><span class="line">  width: 85%;</span><br><span class="line">  max-width: 45em;</span><br><span class="line">  margin: 2.8em auto 0;</span><br><span class="line">  padding: 0.5em 1.0em;</span><br><span class="line">  border: 1px solid #d3d3d3;</span><br><span class="line">  font-size: 0.93rem;</span><br><span class="line">  line-height: 1.6em;</span><br><span class="line">  word-break: break-all;</span><br><span class="line">  background: rgba(255,255,255,0.4);</span><br><span class="line">&#125;</span><br><span class="line">.my_post_copyright p&#123;margin:0;&#125;</span><br><span class="line">.my_post_copyright span &#123;</span><br><span class="line">  display: inline-block;</span><br><span class="line">  width: 5.2em;</span><br><span class="line">  color: #b5b5b5;</span><br><span class="line">  font-weight: bold;</span><br><span class="line">&#125;</span><br><span class="line">.my_post_copyright .raw &#123;</span><br><span class="line">  margin-left: 1em;</span><br><span class="line">  width: 5em;</span><br><span class="line">&#125;</span><br><span class="line">.my_post_copyright a &#123;</span><br><span class="line">  color: #808080;</span><br><span class="line">  border-bottom:0;</span><br><span class="line">&#125;</span><br><span class="line">.my_post_copyright a:hover &#123;</span><br><span class="line">  color: #a3d2a3;</span><br><span class="line">  text-decoration: underline;</span><br><span class="line">&#125;</span><br><span class="line">.my_post_copyright:hover .fa-clipboard &#123;</span><br><span class="line">  color: #000;</span><br><span class="line">&#125;</span><br><span class="line">.my_post_copyright .post-url:hover &#123;</span><br><span class="line">  font-weight: normal;</span><br><span class="line">&#125;</span><br><span class="line">.my_post_copyright .copy-path &#123;</span><br><span class="line">  margin-left: 1em;</span><br><span class="line">  width: 1em;</span><br><span class="line">  +mobile()&#123;display:none;&#125;</span><br><span class="line">&#125;</span><br><span class="line">.my_post_copyright .copy-path:hover &#123;</span><br><span class="line">  color: #808080;</span><br><span class="line">  cursor: pointer;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>修改<code>Blog/themes/next/layout/_macro/post.swig</code>，在如图位置 post body 后面添加以下代码：<br><img src="https://img-blog.csdnimg.cn/20190113130052239.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0phc21pbmVhaGE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="selector-tag">div</span>&gt;</span><br><span class="line">      &#123;% if not is_index %&#125;</span><br><span class="line">        &#123;% include 'my-copyright.swig' %&#125;</span><br><span class="line">      &#123;% endif %&#125;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure></p><p>在<code>Blog/themes/next/source/css/_common/components/post/post.styl</code>文件最后加入下面的代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">@import &quot;my-post-copyright&quot;</span><br></pre></td></tr></table></figure><p>在Markdown文章中加入<code>copyright : ture</code>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: Hexo-NexT主题配置</span><br><span class="line">date: 2018-01-20 20:41:08</span><br><span class="line">categories: Hexo</span><br><span class="line">tags:</span><br><span class="line">- Hexo</span><br><span class="line">- NexT</span><br><span class="line">top: 100</span><br><span class="line">copyright: ture</span><br><span class="line">---</span><br></pre></td></tr></table></figure><p>配置根目录下的_config.yml文件，配置为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># URL</span><br><span class="line">## If your site is put in a subdirectory, set url as &apos;http://yoursite.com/child&apos; and root as &apos;/child/&apos;</span><br><span class="line">url: https://wenmobo.github.io/  //你的网站地址</span><br><span class="line">root: /</span><br><span class="line">permalink: :year/:month/:day/:title/</span><br><span class="line">permalink_defaults:</span><br></pre></td></tr></table></figure><h2 id="19-添加侧栏推荐阅读"><a href="#19-添加侧栏推荐阅读" class="headerlink" title="19.添加侧栏推荐阅读"></a>19.添加侧栏推荐阅读</h2><p>编辑主题配置文件，如下配置即可：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># Blog rolls</span><br><span class="line">links_icon: link</span><br><span class="line">links_title: 推荐阅读</span><br><span class="line">#links_layout: block</span><br><span class="line">links_layout: inline</span><br><span class="line">links:</span><br><span class="line">  Swift 4: https://developer.apple.com/swift/</span><br><span class="line">  Objective-C: https://developer.apple.com/documentation/objectivec</span><br></pre></td></tr></table></figure></p><p>效果如下图所示：<br><img src="https://img-blog.csdnimg.cn/20190113130727708.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0phc21pbmVhaGE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="20-添加底部桃心"><a href="#20-添加底部桃心" class="headerlink" title="20.添加底部桃心"></a>20.添加底部桃心</h2><p>打开<code>Blog/themes/next/layout/_partials/footer.swig</code>搜索with-love，在fontawesom找到你喜欢的图标，在如下位置替换即可：<br><img src="https://img-blog.csdnimg.cn/20190113131211555.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0phc21pbmVhaGE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>效果如下图所示：<br><img src="https://img-blog.csdnimg.cn/20190113131231975.png" alt="在这里插入图片描述"></p><h2 id="21-添加DaoVoice在线联系"><a href="#21-添加DaoVoice在线联系" class="headerlink" title="21.添加DaoVoice在线联系"></a>21.添加DaoVoice在线联系</h2><p>首先在<a href="http://dashboard.daovoice.io/get-started" target="_blank" rel="noopener">DaoVoice</a>注册个账号<br>完成后，会得到一个app_id，后面会用到：<br><img src="https://img-blog.csdnimg.cn/20190113132753183.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0phc21pbmVhaGE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>修改<code>themes\hexo-theme-next\layout\_partials\head\head.swig</code>文件，在如下位置添加内容如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#123;% if theme.daovoice %&#125;</span><br><span class="line">  &lt;script&gt;</span><br><span class="line">  (function(i,s,o,g,r,a,m)&#123;i[&quot;DaoVoiceObject&quot;]=r;i[r]=i[r]||function()&#123;(i[r].q=i[r].q||[]).push(arguments)&#125;,i[r].l=1*new Date();a=s.createElement(o),m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;a.charset=&quot;utf-8&quot;;m.parentNode.insertBefore(a,m)&#125;)(window,document,&quot;script&quot;,(&apos;https:&apos; == document.location.protocol ? &apos;https:&apos; : &apos;http:&apos;) + &quot;//widget.daovoice.io/widget/0f81ff2f.js&quot;,&quot;daovoice&quot;)</span><br><span class="line">  daovoice(&apos;init&apos;, &#123;</span><br><span class="line">      app_id: &quot;&#123;&#123;theme.daovoice_app_id&#125;&#125;&quot;</span><br><span class="line">    &#125;);</span><br><span class="line">  daovoice(&apos;update&apos;);</span><br><span class="line">  &lt;/script&gt;</span><br><span class="line">&#123;% endif %&#125;</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20190113132534348.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0phc21pbmVhaGE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>在主题配置文件_config.yml文件中添加内容：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># Online contact</span><br><span class="line">daovoice: true</span><br><span class="line">daovoice_app_id:   # 这里填你刚才获得的 app_id</span><br></pre></td></tr></table></figure></p><p>聊天窗口配置<br><img src="https://img-blog.csdnimg.cn/2019011313324511.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0phc21pbmVhaGE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>我的配置如下：<br><img src="https://img-blog.csdnimg.cn/20190113133445707.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0phc21pbmVhaGE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>效果如下：<br><img src="https://img-blog.csdnimg.cn/20190113133609160.png" alt="在这里插入图片描述"></p><h2 id="22-博客加上萌萌的宠物"><a href="#22-博客加上萌萌的宠物" class="headerlink" title="22. 博客加上萌萌的宠物"></a>22. 博客加上萌萌的宠物</h2><p>然后输入如下代码安装：</p><pre><code>npm install -save hexo-helper-live2d</code></pre><p>然后在 hexo 的 _config.yml 中添加参数：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">live2d:</span><br><span class="line">  enable: true</span><br><span class="line">  scriptFrom: local</span><br><span class="line">  model:</span><br><span class="line">    use: live2d-widget-model-miku</span><br><span class="line">  display:</span><br><span class="line">    position: right</span><br><span class="line">    width: 140</span><br><span class="line">    height: 260</span><br><span class="line">  mobile:</span><br><span class="line">    show: true</span><br></pre></td></tr></table></figure></p><p>其中的 model 可以从一下列表中选择一个：<br>点击查看<a href="https://huaji8.top/post/live2d-plugin-2.0/" target="_blank" rel="noopener"><strong>模型预览</strong></a>，查看<a href="https://github.com/xiazeyu/live2d-widget-models" target="_blank" rel="noopener"><strong>官方文档</strong></a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">live2d-widget-model-chitose</span><br><span class="line">live2d-widget-model-epsilon2_1</span><br><span class="line">live2d-widget-model-gf</span><br><span class="line">live2d-widget-model-haru/01 (use npm install --save live2d-widget-model-haru)</span><br><span class="line">live2d-widget-model-haru/02 (use npm install --save live2d-widget-model-haru)</span><br><span class="line">live2d-widget-model-haruto</span><br><span class="line">live2d-widget-model-hibiki</span><br><span class="line">live2d-widget-model-hijiki</span><br><span class="line">live2d-widget-model-izumi</span><br><span class="line">live2d-widget-model-koharu</span><br><span class="line">live2d-widget-model-miku</span><br><span class="line">live2d-widget-model-ni-j</span><br><span class="line">live2d-widget-model-nico</span><br><span class="line">live2d-widget-model-nietzsche</span><br><span class="line">live2d-widget-model-nipsilon</span><br><span class="line">live2d-widget-model-nito</span><br><span class="line">live2d-widget-model-shizuku</span><br><span class="line">live2d-widget-model-tororo</span><br><span class="line">live2d-widget-model-tsumiki</span><br><span class="line">live2d-widget-model-unitychan</span><br><span class="line">live2d-widget-model-wanko</span><br><span class="line">live2d-widget-model-z16</span><br></pre></td></tr></table></figure></p><hr><h2 id="首页文章只显示预览"><a href="#首页文章只显示预览" class="headerlink" title="首页文章只显示预览"></a>首页文章只显示预览</h2><p>打开主题配置文件 _config.yml，搜索 <code>auto_excerpt</code> ,找到如下部分：</p><pre><code># Automatically Excerpt. Not recommand.# Please use &lt;!-- more --&gt; in the post to control excerpt accurately.auto_excerpt:    enable: false    length: 150</code></pre><p>把enable改为对应的 false 改为 true</p>]]></content>
      
      
      <categories>
          
          <category> 未分类 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>利用 Github Pages 和 Hexo 搭建博客常见问题解决</title>
      <link href="/2019/01/09/%E5%88%A9%E7%94%A8%20Github%20Pages%20%E5%92%8C%20Hexo%20%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/"/>
      <url>/2019/01/09/%E5%88%A9%E7%94%A8%20Github%20Pages%20%E5%92%8C%20Hexo%20%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/</url>
      
        <content type="html"><![CDATA[<p>欢迎各位大佬来参观我的博客：<strong><a href="http://amosmeer.cn/">AmosMeer’s Blog</a></strong><br>搭建过程中出现的任何问题请参考博客：<a href="http://amosmeer.cn/2019/01/09/%E5%88%A9%E7%94%A8%20Github%20Pages%20%E5%92%8C%20Hexo%20%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/"><strong>常见问题解决</strong></a><br>完整的博客搭建过程的文章汇总：</p><ol><li><a href="http://amosmeer.cn/2019/01/09/%E5%88%A9%E7%94%A8%20Github%20Pages%20%E5%92%8C%20Hexo%20%E5%88%9D%E6%AD%A5%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/">利用 Github Pages 和 Hexo 初步搭建博客</a></li><li><a href="http://amosmeer.cn/2019/01/09/%E5%8D%9A%E5%AE%A2%E7%9A%84%E7%BE%8E%E5%8C%96%E9%85%8D%E7%BD%AE%EF%BC%88NexT%E4%B8%BB%E9%A2%98%EF%BC%89/">博客的美化配置（NexT主题）</a></li><li><a href="http://amosmeer.cn/2019/01/09/%E5%8D%9A%E5%AE%A2%E7%9A%84%E5%8A%9F%E8%83%BD%E9%85%8D%E7%BD%AE/">博客的功能配置</a></li><li><a href="http://amosmeer.cn/2019/01/09/%E5%88%A9%E7%94%A8%20Github%20Pages%20%E5%92%8C%20Hexo%20%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/">利用 Github Pages 和 Hexo 搭建博客常见问题解决</a></li><li><a href="http://amosmeer.cn/2019/01/09/%E5%B8%B8%E8%A7%81%20Hexo%20%E5%91%BD%E4%BB%A4/">常见 Hexo 命令</a></li></ol><h1 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h1><p><strong>说明：</strong><br>hexo 下的 _config.yml 称为站点配置文件<br>themes/next 中 的_config.yml 称为主题配置文件</p><h2 id="语言不生效问题"><a href="#语言不生效问题" class="headerlink" title="语言不生效问题"></a>语言不生效问题</h2><p>根据官方文档描述：<br>| 语言 | 代码 | 设定示例 |<br>|–|–|–|<br>| English | en | language: en |<br>|简体中文 | zh-Hans    | language: zh-Hans|<br>|Français|    fr-FR    | language: fr-FR|<br>|Português|    pt|    language: pt or language: pt-BR|<br>|繁體中文|    zh-hk 或者 zh-tw|    language: zh-hk|<br>|Русский| язык    |ru    language: ru|<br>|Deutsch|    de    |language: de|<br>|日本語|    ja|    language: ja|<br>|Indonesian|    id    |language: id|<br>|Korean|    ko    |language: ko|</p><p>在<strong>站点配置文件</strong>中设置语言</p><blockquote><p>language: zh-Hans  // 这里设置语言为 简体中文</p></blockquote><p>如果不起作用的话，查看 themes/next/languages/ 目录下是否有zh-Hans.yml 文件。如果没有的话需要把 zh-CN.yml 文件改成名字为 zh-Hans.yml 就可以了。</p><h2 id="出现-npm-command-not-found"><a href="#出现-npm-command-not-found" class="headerlink" title="出现 npm: command not found"></a>出现 npm: command not found</h2><p>有 git bash，也安装了 node.js, 但是在运行 bash 时依旧会报错 npm: command not found<br><strong>解决方案：</strong><br>需要改成全局安装。<br>npm install grunt ：本地安装<br>npm install -g grunt-cli ：全局安装<br>在cmd 下输入以下内容就可以了：</p><blockquote><p>npm install -g grunt-cli </p></blockquote><h2 id="创建新的SSH密钥时创建失败"><a href="#创建新的SSH密钥时创建失败" class="headerlink" title="创建新的SSH密钥时创建失败"></a>创建新的SSH密钥时创建失败</h2><p><strong>解决方案</strong>：如果创建位置位于C盘，可以尝试以管理员的身份运行 Git Bash Here</p><h2 id="出现-bash-cd-too-many-arguments"><a href="#出现-bash-cd-too-many-arguments" class="headerlink" title="出现 bash: cd: too many arguments"></a>出现 bash: cd: too many arguments</h2><p>命令中存在空格，如果是不必要空格直接删掉就好，若果是路径名或者变量中间有空格时，需要用双引号括起来。</p><h2 id="Git-密钥认证-github-时出现错误"><a href="#Git-密钥认证-github-时出现错误" class="headerlink" title="Git 密钥认证 github 时出现错误"></a>Git 密钥认证 github 时出现错误</h2><blockquote><p>$ ssh -T <a href="mailto:git@github.com" target="_blank" rel="noopener">git@github.com</a><br>The authenticity of host ‘github.com (192.30.255.112)’ can’t be established.<br>RSA key fingerprint is SHA256:nThbg6kXUpJWGl7E1IGOCspRomTxdCARLviKY8.<br>Are you sure you want to continue connecting (yes/no)?</p></blockquote><p><strong>解决方案：</strong><br>直接输入 yes 回车，这时在ssh目录下除 id_rsa，id_rsa.pub 文件外，还会生成一个know_hosts 文件。</p><h2 id="出现-ERROR-Deployer-not-found-git"><a href="#出现-ERROR-Deployer-not-found-git" class="headerlink" title="出现 ERROR Deployer not found: git"></a>出现 ERROR Deployer not found: git</h2><p>执行 hexo g -d 时出现报错 ERROR Deployer not found: git，说明你的 deployer 没有安装成功，需要执行如下命令再安装一次：</p><blockquote><p>npm install hexo-deployer-git –save</p></blockquote><p>这样，再执行 hexo g -d，博客就部署到 Github 上了</p><h2 id="hexo更换主题后出现-WARN-No-layout-index-html"><a href="#hexo更换主题后出现-WARN-No-layout-index-html" class="headerlink" title="hexo更换主题后出现 WARN No layout: index.html"></a>hexo更换主题后出现 WARN No layout: index.html</h2><p><strong>解决方案</strong>：</p><ul><li>检查下载的主题是不是放在了 themes 文件夹下面。比如 next 主题的放置，就是点开 themes 就看到 next 的文件夹，next 下面就是主题的文件，不能打开 next 文件夹里面还有 themes。</li><li><p>检查站点配置 _config.yml 是否正确：theme: 主题名字</p><ul><li>这里是 theme，不是themes</li><li>theme 与主题名直接有一个空格（冒号后面有空格）</li><li>主题名字是否与themes文件夹下的主题的名字一致</li></ul></li></ul><h2 id="乱码问题"><a href="#乱码问题" class="headerlink" title="乱码问题"></a>乱码问题</h2><p>如果是记事本编辑后出现了乱码，尝试使用另存为更换编码方式为 utf-8<br><img src="https://img-blog.csdnimg.cn/20190113013517790.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0phc21pbmVhaGE=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20190113013555548.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0phc21pbmVhaGE=,size_16,color_FFFFFF,t_70" alt=""></p><h2 id="git错误-unable-to-auto-detect-email-address"><a href="#git错误-unable-to-auto-detect-email-address" class="headerlink" title="git错误:unable to auto-detect email address"></a>git错误:unable to auto-detect email address</h2><p>每次重新新建工程时候git的配置信息都不能直接在命令行里修改 用户名 和邮箱，不会生效，且报错</p><p>*** Please tell me who you are.<br>Run<br>git config –global user.email “<a href="mailto:you@example.com" target="_blank" rel="noopener">you@example.com</a>“<br>git config –global user.name “Your Name”<br>to set your account’s default identity.<br>Omit –global to set the identity only in this repository.<br>fatal: unable to auto-detect email address (got ‘Administrator@PC-20150120BUBR.(none)’)</p><p><strong>解决方案：</strong><br>找到工程目录 (Project) 的.git文件夹 <code>Hexo\.deploy_git\.git</code>，打开之后找到 config 文件，在最后边加上一句话<br>[user]<br>email=your email<br>name=your name</p>]]></content>
      
      
      <categories>
          
          <category> 未分类 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【线段树】 2018-2019 ICPC,NEERC,Southern Subregional Contest (Online Mirror, ACM-ICPC）C. Cloud Computing</title>
      <link href="/2018/12/09/%E3%80%90%E7%BA%BF%E6%AE%B5%E6%A0%91%E3%80%91%202018-2019%20ICPC,NEERC,Southern%20Subregional%20Contest%20(Online%20Mirror,%20ACM-ICPC%EF%BC%89C.%20Cloud%20Computing/"/>
      <url>/2018/12/09/%E3%80%90%E7%BA%BF%E6%AE%B5%E6%A0%91%E3%80%91%202018-2019%20ICPC,NEERC,Southern%20Subregional%20Contest%20(Online%20Mirror,%20ACM-ICPC%EF%BC%89C.%20Cloud%20Computing/</url>
      
        <content type="html"><![CDATA[<h3 id="题目链接：http-codeforces-com-contest-1070-problem-C"><a href="#题目链接：http-codeforces-com-contest-1070-problem-C" class="headerlink" title="题目链接：http://codeforces.com/contest/1070/problem/C"></a>题目链接：<a href="http://codeforces.com/contest/1070/problem/C" target="_blank" rel="noopener">http://codeforces.com/contest/1070/problem/C</a></h3><p>Buber is a Berland technology company that specializes in waste of investor’s money. Recently Buber decided to transfer its infrastructure to a cloud. The company decided to rent CPU cores in the cloud for n consecutive days, which are numbered from 1 to n. Buber requires k CPU cores each day.<br>The cloud provider offers m tariff plans, the i-th tariff plan is characterized by the following parameters:<br>li and ri — the i-th tariff plan is available only on days from li to ri, inclusive,<br>ci — the number of cores per day available for rent on the i-th tariff plan,<br>pi — the price of renting one core per day on the i-th tariff plan.<br>Buber can arbitrarily share its computing core needs between the tariff plans. Every day Buber can rent an arbitrary number of cores (from 0 to ci) on each of the available plans. The number of rented cores on a tariff plan can vary arbitrarily from day to day.<br>Find the minimum amount of money that Buber will pay for its work for n days from 1 to n. If on a day the total number of cores for all available tariff plans is strictly less than k, then this day Buber will have to work on fewer cores (and it rents all the available cores), otherwise Buber rents exactly k cores this day.</p><h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>有 n 天，每天需要买 k 个cpu。现在有 m 个供应商，第 i 个供应商可在 [Li, Ri] 天之间，每天提供 Ci 个价格为 Pi 的cpu。如果某天的 cpu 凑不够 k 个，那就把仅有的全买下。问 n 天的最小花费。</p><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>对价格建立一棵权值线段树，每个节点表示这个价格区间内的 cpu 数量和总价格。</p><p>因此我们对于每一天记录有哪些新活动加入，哪些活动结束。然后维护线段树，即价格为i的活动，一共能提供多少个CPU。 这样对于每天去查询线段树时，就可以找到价格最低的 k 个cpu。在维护线段树时，额外再维护一个当前区间内所有 cpu 的总价格。那么，线段树的每个节点存的是这个价格区间内的 cpu 数量和总价。</p><p>这样就利用了线段树的二分性，快速求出了前缀数量和为K的价格和。</p><h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; PII;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MaxN = <span class="number">1e6</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, m, k;</span><br><span class="line"><span class="built_in">vector</span>&lt;PII&gt; day[MaxN];</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">sgtree</span> &#123;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ls o &lt;&lt; 1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rs ls | 1</span></span><br><span class="line">LL cnt[<span class="number">4</span> * MaxN], cost[<span class="number">4</span> * MaxN]; <span class="comment">//当前节点的CPU的 数量 和 总价格</span></span><br><span class="line">PII val;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">pushUP</span><span class="params">(<span class="keyword">int</span> o)</span> </span>&#123;</span><br><span class="line">cnt[o] = cnt[ls] + cnt[rs];</span><br><span class="line">cost[o] = cost[ls] + cost[rs];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> o, <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(l == r) &#123;</span><br><span class="line">cnt[o] += val.first;</span><br><span class="line">cost[o] += <span class="number">1L</span>L * val.first * val.second;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(val.second &lt;= mid) update(ls, l, mid);</span><br><span class="line"><span class="keyword">else</span> update(rs, mid + <span class="number">1</span>, r);</span><br><span class="line">pushUP(o);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">LL <span class="title">query</span><span class="params">(<span class="keyword">int</span> o, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> ned)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(cnt[o] &lt;= ned) <span class="keyword">return</span> cost[o]; <span class="comment">//当前l~r的总个数小于需要的个数，就全买</span></span><br><span class="line"><span class="keyword">if</span>(l == r) <span class="keyword">return</span> <span class="number">1L</span>L * ned * l;  <span class="comment">//查询到最底层后，就全买价格为l的</span></span><br><span class="line"><span class="keyword">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line"><span class="comment">//如果l~mid的个数大于我所需要的，就从此区间选择</span></span><br><span class="line"><span class="keyword">if</span>(cnt[ls] &gt;= ned) <span class="keyword">return</span> query(ls, l, mid, ned); </span><br><span class="line"><span class="comment">//否则先把便宜的全买了，再去右边的区间查询</span></span><br><span class="line"><span class="keyword">return</span> cost[ls] + query(rs, mid+<span class="number">1</span>, r, ned - cnt[ls]); </span><br><span class="line">&#125;</span><br><span class="line">&#125;tree;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">LL ans = <span class="number">0L</span>L;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d %d %d"</span>, &amp;n, &amp;k, &amp;m);</span><br><span class="line"><span class="keyword">while</span>(m--) &#123;</span><br><span class="line"><span class="keyword">int</span> l, r, c, p;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d %d %d %d"</span>, &amp;l, &amp;r, &amp;c, &amp;p);</span><br><span class="line">day[l].push_back(PII(c, p));     <span class="comment">//每天新加的活动</span></span><br><span class="line">day[r+<span class="number">1</span>].push_back(PII(-c, p));  <span class="comment">//每天退出的活动</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; day[i].size(); j++) &#123;</span><br><span class="line">tree.val = day[i][j];</span><br><span class="line">tree.update(<span class="number">1</span>, <span class="number">1</span>, MaxN);</span><br><span class="line">&#125;</span><br><span class="line">ans += tree.query(<span class="number">1</span>, <span class="number">1</span>, MaxN, k);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, ans);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 线段树 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 线段树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【数论】快速分解质因数的技巧 &amp;&amp; 筛法求素数（快速筛）</title>
      <link href="/2018/09/17/%E3%80%90%E6%95%B0%E8%AE%BA%E3%80%91%E5%BF%AB%E9%80%9F%E5%88%86%E8%A7%A3%E8%B4%A8%E5%9B%A0%E6%95%B0%E7%9A%84%E6%8A%80%E5%B7%A7%20&amp;&amp;%20%E7%AD%9B%E6%B3%95%E6%B1%82%E7%B4%A0%E6%95%B0%EF%BC%88%E5%BF%AB%E9%80%9F%E7%AD%9B%EF%BC%89/"/>
      <url>/2018/09/17/%E3%80%90%E6%95%B0%E8%AE%BA%E3%80%91%E5%BF%AB%E9%80%9F%E5%88%86%E8%A7%A3%E8%B4%A8%E5%9B%A0%E6%95%B0%E7%9A%84%E6%8A%80%E5%B7%A7%20&amp;&amp;%20%E7%AD%9B%E6%B3%95%E6%B1%82%E7%B4%A0%E6%95%B0%EF%BC%88%E5%BF%AB%E9%80%9F%E7%AD%9B%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h1 id="快速分解质因数"><a href="#快速分解质因数" class="headerlink" title="快速分解质因数"></a>快速分解质因数</h1><p>在做题时经常遇到要分解质因数，那么如何快速分解质因数呢？</p><p>在用筛法求素数时，我们使用线性筛的方法，并在每次筛的过程中，记录下每个数的最小质因数。那么在分解质因数的时候，只需要不断除以当前数的最小质因数，就可以快速得到分解的质因数了。</p><p>给出一个简单的例子，比如我们要求 50 这个数的质因数：</p><p>首先，利用线性筛找到所有的素数，并记录非素数的最小质因数，然后再将数字 50 除以他的最小质因子（也就是2）得到 25，然后再将数字 25 除以他的最小质因子（也就是5）得到 5，到这为止就做完啦，50 的质因数就是 2 和 5。</p><h1 id="筛法求素数"><a href="#筛法求素数" class="headerlink" title="筛法求素数"></a>筛法求素数</h1><h2 id="一般的线性筛法"><a href="#一般的线性筛法" class="headerlink" title="一般的线性筛法"></a>一般的线性筛法</h2><p>这种方法比较好理解：初始时，假设全部都是素数，当找到一个素数时，显然这个素数乘上另外一个数之后就一定是合数(注意上面的 i<em>i , 比 i</em>2 要快点 )，把这些合数都筛掉，即算法名字的由来。 但仔细分析能发现，这种方法会造成重复筛除合数，影响效率。比如10，在 i = 2 的时候，k = 2<em>15 筛了一次；在 i=5，k=5</em>6 的时候又筛了一次。所以，也就有了快速线性筛法。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">make_prime</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(prime, <span class="number">1</span>, <span class="keyword">sizeof</span>(prime));</span><br><span class="line">    prime[<span class="number">0</span>] = prime[<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">2</span>;  i &lt; n;  i++) &#123;</span><br><span class="line">        <span class="keyword">if</span>(prime[i]) &#123;</span><br><span class="line">            primes[++cnt] = i;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = i * i; j &lt; n; j += i)</span><br><span class="line">                prime[j] = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="快速线性筛法"><a href="#快速线性筛法" class="headerlink" title="快速线性筛法"></a>快速线性筛法</h2><p>快速线性筛法没有冗余，不会重复筛除一个数，所以“几乎”是线性的，虽然从代码上分析，时间复杂度并不是O(n)。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">GetPrime</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">2</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span>(!NotPrime[i]) prime[num_prime++] = i;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; num_prime &amp;&amp; i * prime[j] &lt; n; j++) &#123;</span><br><span class="line">            NotPrime[i*prime[j]] = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span>(i % prime[j] == <span class="number">0</span>) <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 数论 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 分解质因数 </tag>
            
            <tag> 数论 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>字节跳动杯_2018中国大学生程序设计竞赛-女生专场</title>
      <link href="/2018/08/24/%E5%AD%97%E8%8A%82%E8%B7%B3%E5%8A%A8%E6%9D%AF_2018%E4%B8%AD%E5%9B%BD%E5%A4%A7%E5%AD%A6%E7%94%9F%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E7%AB%9E%E8%B5%9B-%E5%A5%B3%E7%94%9F%E4%B8%93%E5%9C%BA/"/>
      <url>/2018/08/24/%E5%AD%97%E8%8A%82%E8%B7%B3%E5%8A%A8%E6%9D%AF_2018%E4%B8%AD%E5%9B%BD%E5%A4%A7%E5%AD%A6%E7%94%9F%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E7%AB%9E%E8%B5%9B-%E5%A5%B3%E7%94%9F%E4%B8%93%E5%9C%BA/</url>
      
        <content type="html"><![CDATA[<h1 id="1002-口算训练"><a href="#1002-口算训练" class="headerlink" title="1002. 口算训练"></a>1002. 口算训练</h1><p>题目链接：<a href="http://acm.hdu.edu.cn/showproblem.php?pid=6287" target="_blank" rel="noopener">http://acm.hdu.edu.cn/showproblem.php?pid=6287</a></p><p>Problem Description<br>小Q非常喜欢数学，但是他的口算能力非常弱。因此他找到了小T，给了小T一个长度为n的正整数序列a1,a2,…,an，要求小T抛出m个问题以训练他的口算能力。<br>每个问题给出三个正整数l,r,d，小Q需要通过口算快速判断al×al+1×…×ar−1×ar是不是d的倍数。<br>小Q迅速地回答了出来，但是小T并不知道正确答案是什么，请写一个程序帮助小T计算这些问题的正确答案。</p><p>Input<br>第一行包含一个正整数T(1≤T≤10)，表示测试数据的组数。<br>每组数据第一行包含两个正整数n,m(1≤n,m≤100000)，分别表示序列长度以及问题个数。<br>第二行包含n个正整数a1,a2,…,an(1≤ai≤100000)，表示序列中的每个数。<br>接下来m行，每行三个正整数l,r,d(1≤l≤r≤n,1≤d≤100000)，表示每个问题。</p><p>Output<br>对于每个问题输出一行，若是倍数，输出Yes，否则输出No。</p><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>将输入的每个数<strong>分解质因数</strong>并记录，对d分解质因数并判断每个质因数在数组中是否有足够的因数。</p><p>[l, r] 中每个数相乘的结果是d的倍数，只需要 [l, r] 之间每个数的因数选择一些乘起来是 d 或 d 的倍数即可。但是暴力的储存查找会超时，所以可以通过用 vector 存因子 x 出现的所有坐标 i，然后再利用<strong>二分查找</strong>当前范围内由多少个因数。</p><p>注意，分解的时候要注意当前数是素数的情况。</p><h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; PII;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MaxN = <span class="number">1e5</span> + <span class="number">5</span>;</span><br><span class="line"> </span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; G[MaxN];</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> x)</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> upper_bound(G[x].begin(), G[x].end(), r) - lower_bound(G[x].begin(), G[x].end(), l);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">check</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> d)</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">2</span>; i * i &lt;= d; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span>(d % i == <span class="number">0</span>) &#123; <span class="comment">//对d分解质因数</span></span><br><span class="line">            <span class="keyword">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">while</span>(d % i == <span class="number">0</span>) &#123;</span><br><span class="line">                cnt++;</span><br><span class="line">                d /= i;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(query(l, r, i) &lt; cnt) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(d &gt; <span class="number">1</span> &amp;&amp; query(l, r, d) &lt; <span class="number">1</span>) <span class="keyword">return</span> <span class="number">0</span>; <span class="comment">//如果当前数是素数</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">()</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> t; <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;t);</span><br><span class="line">    <span class="keyword">while</span>(t--) &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= MaxN; i++) G[i].clear();</span><br><span class="line">        <span class="keyword">int</span> n, m;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d %d"</span>, &amp;n, &amp;m);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">            <span class="keyword">int</span> x; <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;x);</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">2</span>; j * j &lt;= x; j++) &#123; <span class="comment">//对数组中的数分解质因数</span></span><br><span class="line">                <span class="keyword">while</span>(x % j == <span class="number">0</span>) &#123;</span><br><span class="line">                    x /= j;</span><br><span class="line">                    G[j].push_back(i); <span class="comment">//对于每次当前的质因数都存储坐标i</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(x &gt; <span class="number">1</span>) G[x].push_back(i); <span class="comment">//当前数是素数</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span>(m--) &#123;</span><br><span class="line">            <span class="keyword">int</span> l, r, d;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d %d %d"</span>, &amp;l, &amp;r, &amp;d);</span><br><span class="line">            <span class="keyword">if</span>(check(l, r, d)) <span class="built_in">printf</span>(<span class="string">"Yes\n"</span>);</span><br><span class="line">            <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"No\n"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="1003-缺失的数据范围"><a href="#1003-缺失的数据范围" class="headerlink" title="1003. 缺失的数据范围"></a>1003. 缺失的数据范围</h1><p>题目链接：<a href="http://acm.hdu.edu.cn/showproblem.php?pid=6288" target="_blank" rel="noopener">http://acm.hdu.edu.cn/showproblem.php?pid=6288</a></p><p>Problem Description<br>著名出题人小Q出过非常多的题目，在这个漫长的过程中他发现，确定题目的数据范围是非常痛苦的一件事。<br>每当思考完一道题目的时间效率，小Q就需要结合时限以及评测机配置来设置合理的数据范围。<br>因为确定数据范围是一件痛苦的事，小Q出了非常多的题目之后，都没有它们设置数据范围。对于一道题目，小Q会告诉你他的算法的时间复杂度为O(nalogbn)，且蕴含在这个大O记号下的常数为1。同时，小Q还会告诉你评测机在规定时限内可以执行k条指令。小Q认为只要na(⌈log2n⌉)b不超过k，那么就是合理的数据范围。其中，⌈x⌉表示最小的不小于x的正整数，即x上取整。<br>自然，小Q希望题目的数据范围n越大越好，他希望你写一个程序帮助他设置最大的数据范围。</p><p> Input<br>第一行包含一个正整数T(1≤T≤1000)，表示测试数据的组数。<br>每组数据包含一行三个正整数a,b,k(1≤a,b≤10,106≤k≤1018)，分别描述时间复杂度以及允许的指令数。</p><p> Output<br>对于每组数据，输出一行一个正整数n，即最大可能的n。</p><h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>给出a、b、k，对于公式  找出最大的n。</p><h2 id="Range"><a href="#Range" class="headerlink" title="Range"></a>Range</h2><p>1 ≤ a, b ≤ 10<br>1e6 ≤ k ≤ 1e18</p><h2 id="Solution-1"><a href="#Solution-1" class="headerlink" title="Solution"></a>Solution</h2><p>二分查找可行解。<br>把公式分为  $n^{a}$ 和 $(\left \lceil log_{2}^{n} \right \rceil)^{_{b}}$ 两部分分别进行判断。</p><p>需要注意的两点是：</p><ul><li>乘法可能溢出，需要将乘法转换为除法 </li><li>求 ⌈log2 n⌉ 时不能使用实数计算，会带来误差，应当使用整数计算。</li></ul><h2 id="Code-1"><a href="#Code-1" class="headerlink" title="Code"></a>Code</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ctime&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> se second</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mst(a, b) memset(a, b, sizeof(a))</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; PII;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> eps = <span class="number">1e-9</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> Mod = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MaxN = <span class="number">1e5</span> + <span class="number">5</span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">int</span> a, b;</span><br><span class="line">LL k;</span><br><span class="line"> </span><br><span class="line"><span class="function">LL <span class="title">log2</span><span class="params">(LL mid)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= <span class="number">64</span>; i++) &#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">pow</span>(<span class="number">2L</span>L, i) &gt;= mid) <span class="keyword">return</span> i;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">check</span><span class="params">(LL mid)</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">LL pre = <span class="number">1L</span>L;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= a; i++) &#123; <span class="comment">//判断前面部分</span></span><br><span class="line"><span class="keyword">if</span>(pre &lt;= k / mid) pre *= mid;  <span class="comment">//防止乘法溢出</span></span><br><span class="line"><span class="keyword">else</span> <span class="keyword">return</span> <span class="literal">false</span>;  <span class="comment">//当前的结果大于k说明不合法</span></span><br><span class="line">&#125;</span><br><span class="line">LL base = log2(mid);</span><br><span class="line">LL suf = <span class="number">1L</span>L;</span><br><span class="line"><span class="keyword">if</span>(suf == <span class="number">0</span>) <span class="keyword">return</span> <span class="literal">true</span>;  <span class="comment">//否则会在下面的除法中出现RE</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= b; i++) &#123;  <span class="comment">//判断后面部分</span></span><br><span class="line"><span class="keyword">if</span>(suf &lt;= k / mid) suf *= base;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(pre &lt;= k / suf) <span class="keyword">return</span> <span class="literal">true</span>;  <span class="comment">//将两部分合起来判断一次</span></span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//ios::sync_with_stdio(false); cin.tie(0); cout.tie(0);</span></span><br><span class="line"> </span><br><span class="line">    <span class="keyword">int</span> t; <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;t);</span><br><span class="line">    <span class="keyword">while</span>(t--) &#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d %d %lld"</span>, &amp;a, &amp;b, &amp;k);</span><br><span class="line">    LL l = <span class="number">0L</span>L, r = <span class="number">1e18</span>, ans = <span class="number">0L</span>L;</span><br><span class="line">    <span class="keyword">while</span>(l &lt;= r) &#123;</span><br><span class="line">LL mid = (l + r) / <span class="number">2</span>;</span><br><span class="line"><span class="keyword">if</span>(check(mid)) l = mid + <span class="number">1</span>, ans = mid;</span><br><span class="line"><span class="keyword">else</span> r = mid - <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="1004-寻宝游戏"><a href="#1004-寻宝游戏" class="headerlink" title="1004. 寻宝游戏"></a>1004. 寻宝游戏</h1><p><strong><a href="http://acm.hdu.edu.cn/showproblem.php?pid=6289" target="_blank" rel="noopener">题目传送门</a></strong></p><p>Problem Description<br>小Q最近迷上了一款寻宝游戏，这款游戏中每局都会生成一个n×m的网格地图，从上往下依次编号为第1行到第n行，从左往右依次编号为第1列到第m列。每个格子上都有不同数量的金币，第i行第j列的格子上的金币数量为ai,j。<br>小Q一开始位于(1,1)，每次他可以往右或者往下走，每当他经过某个格子时，他就可以拿走这个格子上的所有金币。小Q不能走出这个地图，当小Q不能再行动时，游戏结束。显然当且仅当小Q位于(n,m)时，游戏才会结束。<br>一轮游戏的得分为这一轮中收集到的金币总量，而在游戏开始前，因为小Q是超级VIP用户，所以他有k次机会交换某两个格子中的金币数。这k次机会不一定要用完，请写一个程序帮助小Q在一轮内拿到尽可能多的金币。</p><p>Input</p><p>第一行包含一个正整数T(1≤T≤10)，表示测试数据的组数。<br>每组数据第一行包含三个整数n,m,k(2≤n,m≤50,0≤k≤20)，分别表示地图的长宽以及交换的次数。<br>接下来n行，每行m个整数ai,j(0≤ai,j≤106)，依次表示每个格子中金币的数量。</p><p> Output</p><p>对于每组数据，输出一行一个整数，即能收集到的金币数量的最大可能值。</p><h2 id="Description-1"><a href="#Description-1" class="headerlink" title="Description"></a>Description</h2><p>对于 n*m 的矩阵每个点都有一个权值。从 (1, 1) 开始每次只能向下或向右走，求到达 (n, m) 时可以获得的最大值，其中你有k次交换机会交换任意两点上的权值。</p><h2 id="Solution-2"><a href="#Solution-2" class="headerlink" title="Solution"></a>Solution</h2><p>假设已经选定了一条路线，那么不考虑具体交换方案，考虑选定一个 t(t ≤ k)，经过的格子里要有 t 个格子的权值不计入得分，而不经过的格子里要有 t 个格子的权值计入总分。那么每一种交换方案都可以对应这样一个转化。<br>设 $f_{i,j,x,y}$  表示从 (1, 1)  出发来到 (i, j)，考虑完前 i − 1 行所有格子以及第 i 行前 j 个格子时，有 x 个经过的格子不计分，y 个不经过的格子计分的情况下，总分的最大值是多少。那么有两种状态转移：</p><ul><li>往右走一格，直接转移到 $f_{i,j+1,{x}’,{y}’}$;</li><li>往下走一格，转移到$f_{i+1,j,{x}’,{y}’}$，需要枚举这一行有多少个不经过的格子计分。显然这些格子一定按照权值从大到小贪心选择。</li></ul><p>最终答案即为$max(f_{n,m,t,t})$  (0 ≤ t ≤ k)</p><p>时间复杂度$O(n^{2}k^{2})$。</p>]]></content>
      
      
      <categories>
          
          <category> 数论 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DP </tag>
            
            <tag> 分解质因数 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>递归总结：八皇后问题（N皇后问题）、汉诺塔（N阶汉诺塔）、全排列问题</title>
      <link href="/2018/07/11/%E9%80%92%E5%BD%92%E6%80%BB%E7%BB%93%EF%BC%9A%E5%85%AB%E7%9A%87%E5%90%8E%E9%97%AE%E9%A2%98%EF%BC%88N%E7%9A%87%E5%90%8E%E9%97%AE%E9%A2%98%EF%BC%89%E3%80%81%E6%B1%89%E8%AF%BA%E5%A1%94%EF%BC%88N%E9%98%B6%E6%B1%89%E8%AF%BA%E5%A1%94%EF%BC%89%E3%80%81%E5%85%A8%E6%8E%92%E5%88%97%E9%97%AE%E9%A2%98/"/>
      <url>/2018/07/11/%E9%80%92%E5%BD%92%E6%80%BB%E7%BB%93%EF%BC%9A%E5%85%AB%E7%9A%87%E5%90%8E%E9%97%AE%E9%A2%98%EF%BC%88N%E7%9A%87%E5%90%8E%E9%97%AE%E9%A2%98%EF%BC%89%E3%80%81%E6%B1%89%E8%AF%BA%E5%A1%94%EF%BC%88N%E9%98%B6%E6%B1%89%E8%AF%BA%E5%A1%94%EF%BC%89%E3%80%81%E5%85%A8%E6%8E%92%E5%88%97%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<p>#1.N皇后问题#</p><p>##问题描述：<br>在一个N * N的棋盘上摆放N个“皇后”，要求两两不在同一直线或斜线上，计算有多少种摆放方法。当N = 8时，即为八皇后问题。</p><p>##代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;cstdio&gt;</span><br><span class="line">#include&lt;cstdlib&gt;</span><br><span class="line">#include&lt;cstring&gt;</span><br><span class="line">#include&lt;cmath&gt;</span><br><span class="line">#include&lt;iostream&gt;</span><br><span class="line">#include&lt;algorithm&gt;</span><br><span class="line">#include&lt;string&gt;</span><br><span class="line">#include&lt;set&gt;</span><br><span class="line">#include&lt;map&gt;</span><br><span class="line">#include&lt;vector&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">typedef long long LL;</span><br><span class="line"></span><br><span class="line">int c[10]; //数组c表示在第x行皇后的列编号,即pos = (x, c[x])</span><br><span class="line">int ans = 0;</span><br><span class="line">int n;</span><br><span class="line"></span><br><span class="line">//逐行放置皇后</span><br><span class="line">void solve(int cur)&#123; //cur用来记录皇后编号</span><br><span class="line">if(cur == n) ans++;</span><br><span class="line">else&#123;</span><br><span class="line">for(int i = 0; i &lt; n; i++)&#123;</span><br><span class="line">bool flag = true;  //用来标记当前皇后是否和之前已经放置过的皇后发生冲突</span><br><span class="line">c[cur] = i;  //记录当前皇后所在的列</span><br><span class="line">for(int j = 0; j &lt; cur; j++) &#123;</span><br><span class="line">if(c[cur] == c[j] || cur - c[cur] == j - c[j] || cur + c[cur] == j + c[j])&#123;  //由于是逐行放置，所以不需要判断是否在同一行，只需判断是否在同一列或同一对角线</span><br><span class="line">flag = false;</span><br><span class="line">break;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">if(flag) solve(cur + 1);  //如果没有发生冲突，继续寻找下一个皇后位置</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">cin &gt;&gt; n;</span><br><span class="line">solve(0);</span><br><span class="line">cout &lt;&lt; ans &lt;&lt; endl;</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>使用vis数组标记更高效的代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">void solve(int cur)&#123;</span><br><span class="line">if(cur == n) ans++;</span><br><span class="line">else&#123;</span><br><span class="line">for(int i = 0; i &lt; n; i++)&#123;</span><br><span class="line">//利用二维数组直接判断，需要注意主对角线标识y-x可能为负，存取时要加上n</span><br><span class="line">if(vis[0][i] || vis[1][cur+i] || vis[2][cur-i+n]) continue;</span><br><span class="line">//c[cur] = i; 如果不需要打印，可以省略c数组 </span><br><span class="line">vis[0][i] = vis[1][cur+i] = vis[2][cur-i+n] = 1; //给同一列和对角线打标记</span><br><span class="line">solve(cur + 1);</span><br><span class="line">vis[0][i] = vis[1][cur+i] = vis[2][cur-i+n] = 0; //取消标记</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>#2.汉诺塔问题#</p><p>##问题描述：<br>有三根杆子A，B，C。A杆上有 N 个 (N&gt;1) 穿孔圆盘，盘的尺寸由下到上依次变小。要求按下列规则将所有圆盘移至 C 杆：</p><ol><li>每次只能移动一个圆盘；</li><li>大盘不能叠在小盘上面。</li></ol><p>提示：可将圆盘临时置于 B 杆，也可将从 A 杆移出的圆盘重新移回 A 杆，但都必须遵循上述两条规则。<br>问：如何移？最少要移动多少次？</p><p><img src="https://img-blog.csdn.net/20180726163150116?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0phc21pbmVhaGE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt=""></p><p>(a)是初始状态，也就是递归的起点。假设 n=4， move(4, A, B, C)：把n个环从A按照一定的规则，借助B，移动到C<br>(b)是step1完成的时候的状态，已经将所有的 n-1，这里也就是3个环从A挪到了B 。第一处递归：move(n-1, A, C, B) ，实现将 n-1 个环从A，借助C，移动到B<br>(c)是step2，此时需要将第n个，也就是第四个最大的环从A挪到C：move(1,A,B,C)，或者直接 printf(“A -&gt; C”);<br>(d)是step3，此时需要将B上面的 n-1 个环从B挪到C。第二处递归：move(n-1,B,A,C) ，实现将 n-1 个环从B，借助A，移动到C</p><p>##代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">void Hanoi (int n, char from, char buffer, char to)&#123; //塔A、B、C</span><br><span class="line">    if (n == 1) &#123; //圆盘只有一个时，只需将其从A塔移到C塔</span><br><span class="line">    printf(&quot;%c-&gt;%d-&gt;%c\n&quot;, from, n, to);</span><br><span class="line">    &#125;</span><br><span class="line">    else &#123;</span><br><span class="line">        move (n-1, from, to, buffer); //把A塔上编号1~n-1的圆盘移到B上，以C为辅助塔</span><br><span class="line">    printf(&quot;%c-&gt;%d-&gt;%c\n&quot;, from, n, to); //把A塔上编号为n的圆盘移到C上</span><br><span class="line">        move (n-1, buffer, from, to); //把B塔上编号1~n-1的圆盘移到C上，以A为辅助塔</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>#3.全排列问题#</p><p>##问题描述：<br>从n个不同元素中任取m（m≤n）个元素，按照一定的顺序排列起来，叫做从n个不同元素中取出m个元素的一个排列。当 m=n 时所有的排列情况叫全排列。</p><p>##递归求解</p><p>##STL大法：<br>next_permutation();<br>参考博客：<a href="https://blog.csdn.net/Jasmineaha/article/details/79122235" target="_blank" rel="noopener">https://blog.csdn.net/Jasmineaha/article/details/79122235</a></p>]]></content>
      
      
      <categories>
          
          <category> DFS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DFS </tag>
            
            <tag> 递归 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2017 Benelux Algorithm Programming Contest (BAPC 17) K. King of the Waves</title>
      <link href="/2018/05/11/2017%20Benelux%20Algorithm%20Programming%20Contest%20(BAPC%2017)%20K.%20King%20of%20the%20Waves/"/>
      <url>/2018/05/11/2017%20Benelux%20Algorithm%20Programming%20Contest%20(BAPC%2017)%20K.%20King%20of%20the%20Waves/</url>
      
        <content type="html"><![CDATA[<h2 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a><a href="http://codeforces.com/gym/101666/attachments" target="_blank" rel="noopener">题目链接</a></h2><p>K King of the Waves<br>Picture by JD Lasica via Flickr.<br>You are organising a king of the hill tournament, the Buenos Aires Paddleboarding Competition (BAPC), with n participants. In a king of the hill tournament, one person starts as a “king” and is<br>then challenged by another person, the winning person becomes the new king. This is repeated until all participants have challenged exactly once (except for the starting person). In a paddleboarding<br>match, there are no draws. The person which ends up as<br>king, wins the tournament. Since you are the organiser, you get to<br>choose the starting person and the order in which they challenge<br>the king.<br>Someone is offering you a substantial amount of money in case<br>one of the participants, Henk, ends up winning the tournament. You happen to know, for<br>any two participants x and y, which of the two would win if they were to match during the<br>tournament. Consequently, you choose to do the unethical: you will try to rig the game. Can<br>you find a schedule that makes Henk win the tournament?<br>Input<br>• The first line contains an integer 1 ≤ n ≤ 1000, the number of participants. The<br>participants are numbered 0, . . . , n − 1, where Henk is 0.<br>• Then n lines follow, where each line has exactly n characters (not counting the newline<br>character). These lines represent the matrix with the information of who beats who, as<br>follows. On line i the jth character is (note that 0 ≤ i, j &lt; n):<br>– ’1’ if person i will win against person j.<br>– ’0’ if person i will lose against person j.<br>– ’X’ if i = j.<br>Output<br>Print a sequence of participants, such that the first person starts as king and the consequent<br>participants challenge the king. If there is no way to rig the game such that Henk wins, print<br>“impossible”.</p><h1 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h1><p>已知n个人（0 ~ n-1），和一个n行n列矩阵：</p><ul><li>‘1’ 代表 i 能赢 j </li><li>‘0’ 代表 j 能赢 i</li><li>‘X’ 代表平局</li></ul><p>安排一个n个人都出场出场顺序，保证最后0赢</p><h1 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h1><p>由于只需要保证0能赢即可，那么对于 i (1 &lt;= i &lt;= n-1) 这个人，必须要保证要么被0打败，要么被0所打败的人打败，所以只需要对0所打败的人和0打败的人所打败的人进行遍历（不需要关心他们是否能赢0，只要保证在遇到0之前会输掉即可），如果所有点都能扫到，就说明0能赢所有人</p><h1 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;cstdio&gt;</span><br><span class="line">#include &lt;cstring&gt;</span><br><span class="line">#include &lt;cmath&gt;</span><br><span class="line">#include &lt;algorithm&gt;</span><br><span class="line">#include &lt;cstdlib&gt;</span><br><span class="line">#include &lt;iostream&gt;</span><br><span class="line">#include &lt;queue&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">typedef long long LL;</span><br><span class="line">const int MaxN = 1e5 + 5;</span><br><span class="line">const int Mod = 1e9 + 7;</span><br><span class="line">const int INF = 0x3f3f3f3f;</span><br><span class="line"></span><br><span class="line">vector &lt;int&gt; G[1005];</span><br><span class="line">int n;</span><br><span class="line">int inseq[MaxN], seq[MaxN];</span><br><span class="line">char s[1005];</span><br><span class="line"></span><br><span class="line">void solve() &#123;</span><br><span class="line">int head = 1, tail = 0; </span><br><span class="line">seq[++tail] = 0, inseq[0] = 1;</span><br><span class="line">while(head &lt;= tail) &#123;</span><br><span class="line">int now = seq[head];</span><br><span class="line">for(int i = 0; i &lt; G[now].size(); i++) &#123;</span><br><span class="line">int u = G[now][i];</span><br><span class="line">if(!inseq[u]) seq[++tail] = u, inseq[u] = 1;</span><br><span class="line">&#125;</span><br><span class="line">head++;</span><br><span class="line">&#125;</span><br><span class="line">if(tail &lt; n) printf(&quot;impossible\n&quot;);</span><br><span class="line">else &#123;</span><br><span class="line">for(int i = tail; i &gt;= 1; i--) printf(&quot;%d &quot;, seq[i]);</span><br><span class="line">printf(&quot;\n&quot;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">int main() &#123;</span><br><span class="line">scanf(&quot;%d&quot;, &amp;n);</span><br><span class="line">for(int i = 0; i &lt; n; i++) &#123;</span><br><span class="line">scanf(&quot;%s&quot;, s);</span><br><span class="line">for(int j = 0; j &lt; n; j++) &#123;</span><br><span class="line">if(s[j] == &apos;0&apos;) G[j].push_back(i);</span><br><span class="line">if(s[j] == &apos;1&apos;) G[i].push_back(j);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">solve();</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Codefroces 384 D.Taxes（哥德巴赫猜想，三素数定理）</title>
      <link href="/2018/05/05/Codefroces%20384%20D.Taxes%EF%BC%88%E5%93%A5%E5%BE%B7%E5%B7%B4%E8%B5%AB%E7%8C%9C%E6%83%B3%EF%BC%8C%E4%B8%89%E7%B4%A0%E6%95%B0%E5%AE%9A%E7%90%86%EF%BC%89/"/>
      <url>/2018/05/05/Codefroces%20384%20D.Taxes%EF%BC%88%E5%93%A5%E5%BE%B7%E5%B7%B4%E8%B5%AB%E7%8C%9C%E6%83%B3%EF%BC%8C%E4%B8%89%E7%B4%A0%E6%95%B0%E5%AE%9A%E7%90%86%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h2 id="Codefroces-384-D"><a href="#Codefroces-384-D" class="headerlink" title="Codefroces 384 D"></a><strong><a href="http://codeforces.com/problemset/problem/735/D" target="_blank" rel="noopener">Codefroces 384 D</a></strong></h2><p>Mr. Funt now lives in a country with a very specific tax laws. The total income of mr. Funt during this year is equal to n (n ≥ 2) burles and the amount of tax he has to pay is calculated as the maximum divisor of n (not equal to n, of course). For example, if n = 6 then Funt has to pay 3 burles, while for n = 25 he needs to pay 5 and if n = 2 he pays only 1 burle.<br>As mr. Funt is a very opportunistic person he wants to cheat a bit. In particular, he wants to split the initial n in several parts n1 + n2 + … + nk = n (here k is arbitrary, even k = 1 is allowed) and pay the taxes for each part separately. He can’t make some part equal to 1 because it will reveal him. So, the condition ni ≥ 2 should hold for all i from 1 to k.<br>Ostap Bender wonders, how many money Funt has to pay (i.e. minimal) if he chooses and optimal way to split n in parts.<br>Input<br>The first line of the input contains a single integer n (2 ≤ n ≤ 2·109) — the total year income of mr. Funt.<br>Output<br>Print one integer — minimum possible number of burles that mr. Funt has to pay as a tax.<br>Examples<br>Input<br>4<br>Output<br>2<br>Input<br>27<br>Output<br>3</p><h1 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h1><p>将n分解为1个或多个的不为1的数字的和的形式，分解后每个数字的最大因子（除数字本身外）相加，求相加后所得结果的最小值</p><h1 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h1><p>求和的最小值，无疑是将n分解成多个素数和的形式最好</p><p>用到的两个定理：</p><ul><li>三素数定理：任何大于2的奇数都可以拆成三个奇素数的和，但如果该奇数可以写成2 + 奇素数，则为两个素数和</li><li>哥德巴赫猜想：任何大于2的偶数都可以写成两个素数的和</li></ul><p>大致过程：</p><ol><li>首先判断是否为偶数，如果n是偶数且n等于2时输出1，如果n为偶数但不等于2则输出2（哥德巴赫猜想）</li><li>如果n是奇数时，且n为素数，输出1</li><li>否则，判断n - 2 是不是素数，如果是输出2，否则输出3（三素数定理）</li></ol><h1 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;cstring&gt;</span><br><span class="line">#include&lt;cstdio&gt;</span><br><span class="line">#include&lt;algorithm&gt;</span><br><span class="line">#include&lt;iostream&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">typedef long long LL;</span><br><span class="line">const int MaxN = 1e5 + 5;</span><br><span class="line"></span><br><span class="line">bool isprime(LL n) &#123;</span><br><span class="line">for(int i = 2; i * i &lt;= n; i++) </span><br><span class="line">if(n % i == 0) return 0;</span><br><span class="line">return 1;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int main() &#123;</span><br><span class="line">LL n;</span><br><span class="line">cin &gt;&gt; n;</span><br><span class="line">if(n == 2) cout &lt;&lt; 1 &lt;&lt; endl;</span><br><span class="line">else if(n % 2 == 0) cout &lt;&lt; 2 &lt;&lt; endl;</span><br><span class="line">else if(isprime(n)) cout &lt;&lt; 1 &lt;&lt; endl;</span><br><span class="line">else if(isprime(n - 2)) cout &lt;&lt; 2 &lt;&lt; endl;</span><br><span class="line">else cout &lt;&lt; 3 &lt;&lt; endl;</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 数论 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 哥德巴赫猜想 </tag>
            
            <tag> 三素数定理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>AtCoder Beginner Contest 086 C - Traveling</title>
      <link href="/2018/05/05/AtCoder%20Beginner%20Contest%20086%20C%20-%20Traveling/"/>
      <url>/2018/05/05/AtCoder%20Beginner%20Contest%20086%20C%20-%20Traveling/</url>
      
        <content type="html"><![CDATA[<h2 id="AtCoder-086-C"><a href="#AtCoder-086-C" class="headerlink" title="AtCoder 086 C "></a><strong><a href="https://abc086.contest.atcoder.jp/tasks/arc089_a" target="_blank" rel="noopener">AtCoder 086 C </a></strong></h2><p>Problem Statement<br>AtCoDeer the deer is going on a trip in a two-dimensional plane. In his plan, he will depart from point (0,0) at time 0, then for each i between 1 and N (inclusive), he will visit point (xi,yi) at time ti.<br>If AtCoDeer is at point (x,y) at time t, he can be at one of the following points at time t+1: (x+1,y), (x−1,y), (x,y+1) and (x,y−1). Note that he cannot stay at his place. Determine whether he can carry out his plan.</p><h1 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h1><p>给出n个数据，每个数据包含t，x，y（t按从小到大排序），要在每个时间t时依次走到点 ( x, y )</p><h1 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h1><p>首先判断这个点和上个点的距离d （横坐标之差加纵坐标之差）是否小于等于 时间差t，其次（重点），判断距离d和时间差t的奇偶性是否想同，若相同则yes，反之no</p><h1 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;iostream&gt;</span><br><span class="line">#include&lt;map&gt;</span><br><span class="line">#include&lt;cstring&gt;</span><br><span class="line">#include&lt;cstdlib&gt;</span><br><span class="line">#include&lt;cmath&gt;</span><br><span class="line">#include&lt;algorithm&gt;</span><br><span class="line">#include&lt;map&gt;</span><br><span class="line">#include&lt;cstdio&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">typedef long long LL;;</span><br><span class="line">const int MaxN = 1e5 + 5;</span><br><span class="line"> </span><br><span class="line">map &lt;int, int&gt; cnt;</span><br><span class="line"> </span><br><span class="line">struct point &#123;</span><br><span class="line">int x, y, t;</span><br><span class="line">&#125; mapp[MaxN];</span><br><span class="line"> </span><br><span class="line">int main() &#123;</span><br><span class="line">int n;</span><br><span class="line">scanf(&quot;%d&quot;, &amp;n);</span><br><span class="line">for(int i = 1; i &lt;= n; i++) &#123;</span><br><span class="line">int x, y, t;</span><br><span class="line">scanf(&quot;%d%d%d&quot;, &amp;t, &amp;x, &amp;y);</span><br><span class="line">mapp[i].x = x, mapp[i].y = y, mapp[i].t = t;</span><br><span class="line">&#125;</span><br><span class="line">mapp[0].x = 0, mapp[0].y = 0, mapp[0].t = 0;</span><br><span class="line">for(int i = 1; i &lt;= n; i++) &#123;</span><br><span class="line">int s, t;</span><br><span class="line">s = fabs(mapp[i].x - mapp[i - 1].x) + fabs(mapp[i].y - mapp[i - 1].y);</span><br><span class="line">t = fabs(mapp[i].t - mapp[i - 1].t);</span><br><span class="line">if(s &gt; t || s % 2  != t % 2 ) &#123;  //奇偶性的判断是关键</span><br><span class="line">cout &lt;&lt; &quot;No&quot; &lt;&lt; endl;</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; &quot;Yes&quot; &lt;&lt; endl;</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>2018浙江省赛(ACM) The 15th Zhejiang Provincial Collegiate Programming Contest Sponsored by TuSimple</title>
      <link href="/2018/05/05/2018%E6%B5%99%E6%B1%9F%E7%9C%81%E8%B5%9B(ACM)%20The%2015th%20Zhejiang%20Provincial%20Collegiate%20Programming%20Contest%20Sponsored%20by%20TuSimple/"/>
      <url>/2018/05/05/2018%E6%B5%99%E6%B1%9F%E7%9C%81%E8%B5%9B(ACM)%20The%2015th%20Zhejiang%20Provincial%20Collegiate%20Programming%20Contest%20Sponsored%20by%20TuSimple/</url>
      
        <content type="html"><![CDATA[<h2 id="比赛链接"><a href="#比赛链接" class="headerlink" title="比赛链接"></a><a href="http://acm.zju.edu.cn/onlinejudge/showContestProblems.do?contestId=378" target="_blank" rel="noopener">比赛链接</a></h2><h1 id="F-Now-Loading"><a href="#F-Now-Loading" class="headerlink" title="F. Now Loading!!!"></a>F. Now Loading!!!</h1><p>DreamGrid has  integers . DreamGrid also has  queries, and each time he would like to know the value of<br>for a given number , where , .<br>Input<br>There are multiple test cases. The first line of input is an integer  indicating the number of test cases. For each test case:<br>The first line contains two integers  and  () – the number of integers and the number of queries.<br>The second line contains  integers  ().<br>The third line contains  integers  ().<br>It is guaranteed that neither the sum of all  nor the sum of all  exceeds .</p><p>Output<br>For each test case, output an integer , where  is the answer for the -th query.</p><h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>给出n个数，m次询问，每次询问给出一个p，对于每次询问按照公式求值，最后按照要求输出</p><h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;cstdio&gt;</span><br><span class="line">#include &lt;cstring&gt;</span><br><span class="line">#include &lt;string&gt;</span><br><span class="line">#include &lt;cstdlib&gt;</span><br><span class="line">#include &lt;iostream&gt;</span><br><span class="line">#include &lt;algorithm&gt;</span><br><span class="line">#include &lt;cmath&gt;</span><br><span class="line">#include &lt;map&gt;</span><br><span class="line">#include &lt;set&gt;</span><br><span class="line">#include &lt;queue&gt;</span><br><span class="line">#include &lt;vector&gt;</span><br><span class="line">#include &lt;stack&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">typedef long long LL;</span><br><span class="line">typedef unsigned long long ULL;</span><br><span class="line">typedef pair&lt;int, int&gt; PII;</span><br><span class="line">const int INF = 0x3f3f3f3f;</span><br><span class="line">const int MaxN = 5e5 + 5;</span><br><span class="line">const int pt = 1e9;</span><br><span class="line"></span><br><span class="line">int n;</span><br><span class="line">LL a[MaxN], sum[MaxN][32]; //注意爆内存</span><br><span class="line"></span><br><span class="line">int get_R(LL x) &#123;</span><br><span class="line">int l = 1, r = n, ans = 0;</span><br><span class="line">while(l &lt;= r) &#123;</span><br><span class="line">int mid = (l + r) &gt;&gt; 1;</span><br><span class="line">if(a[mid] &lt;= x) ans = mid, l = mid + 1;</span><br><span class="line">else r = mid - 1;</span><br><span class="line">&#125;</span><br><span class="line">return ans;</span><br><span class="line">&#125;</span><br><span class="line">int main() &#123;</span><br><span class="line">int t, m;</span><br><span class="line">scanf(&quot;%d&quot;, &amp;t);</span><br><span class="line">while(t--) &#123;</span><br><span class="line">scanf(&quot;%d %d&quot;, &amp;n, &amp;m);</span><br><span class="line">for(int i = 1; i &lt;= n; i++) scanf(&quot;%lld&quot;, &amp;a[i]);</span><br><span class="line">sort(a + 1, a + 1 + n);</span><br><span class="line">for(int j = 1; j &lt;= 31; j++) //前缀和</span><br><span class="line">for(int i = 1; i &lt;= n; i++) </span><br><span class="line">sum[i][j] = sum[i - 1][j] + (a[i] - (a[i] % j)); //注意向下取整</span><br><span class="line">LL ans = 0LL;</span><br><span class="line">for(int i = 1; i &lt;= m; i++) &#123;</span><br><span class="line">LL p; scanf(&quot;%lld&quot;, &amp;p);</span><br><span class="line">LL s = 1LL, res = 0LL;</span><br><span class="line">int L = 0, tot = 0;</span><br><span class="line">while(s &lt;= a[n]) &#123;</span><br><span class="line">s *= p; tot++;</span><br><span class="line">int R = get_R(s); //二分找答案</span><br><span class="line">res = (res + ((sum[R][tot] - sum[L][tot]) / tot) % pt) % pt;</span><br><span class="line">L = R;</span><br><span class="line">&#125;</span><br><span class="line">ans = (ans + (res * i) % pt) % pt;</span><br><span class="line">&#125;</span><br><span class="line">printf(&quot;%lld\n&quot;, ans);</span><br><span class="line">&#125;</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="I-Magic-Points"><a href="#I-Magic-Points" class="headerlink" title="I. Magic Points"></a>I. Magic Points</h1><p>ZOJ Problem Set - 4032<br>Magic Points<br>Time Limit: 1 Second      Memory Limit: 65536 KB      Special Judge<br>Given an integer , we say a point  on a 2D plane is a magic point, if and only if both  and  are integers, and exactly one of the following conditions is satisfied:<br>It’s easy to discover that there are  magic points in total. These magic points are numbered from  to  in counter-clockwise order starting from .<br>DreamGrid can create  magic lines from these magic points. Each magic line passes through exactly two magic points but cannot be parallel to the line  or  (that is to say, the coordinate axes).<br>The intersections of the magic lines are called dream points, and for some reason, DreamGrid would like to make as many dream points as possible. Can you tell him how to create these magic lines?<br>Input<br>There are multiple test cases. The first line of input contains an integer  (about 100), indicating the number of test cases. For each test case, there is only one integer  ().<br>Output<br>For each case output  integers  in one line separated by one space, indicating that in your answer, point  and point  is connected by a line for all .<br>If there are multiple answers, you can print any of them.<br>Sample Input<br>3<br>2<br>3<br>4<br>Sample Output<br>0 2 1 3<br>1 4 2 5 3 6<br>0 6 1 9 3 8 4 10</p><h2 id="Description-1"><a href="#Description-1" class="headerlink" title="Description"></a>Description</h2><p>给出一个n，在符合条件的点中构造直线且交点最多</p><h2 id="Code-1"><a href="#Code-1" class="headerlink" title="Code"></a>Code</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;cstdio&gt;</span><br><span class="line">#include &lt;cstring&gt;</span><br><span class="line">#include &lt;string&gt;</span><br><span class="line">#include &lt;cstdlib&gt;</span><br><span class="line">#include &lt;iostream&gt;</span><br><span class="line">#include &lt;algorithm&gt;</span><br><span class="line">#include &lt;cmath&gt;</span><br><span class="line">#include &lt;map&gt;</span><br><span class="line">#include &lt;set&gt;</span><br><span class="line">#include &lt;queue&gt;</span><br><span class="line">#include &lt;vector&gt;</span><br><span class="line">#include &lt;stack&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">typedef long long LL;</span><br><span class="line">typedef unsigned long long ULL;</span><br><span class="line">typedef pair&lt;int, int&gt; PII;</span><br><span class="line">const int INF = 0x3f3f3f3f;</span><br><span class="line">const int MaxN = 5e5 + 5;</span><br><span class="line">const int pt = 1e9;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">int main() &#123;</span><br><span class="line">    int t, n;</span><br><span class="line">    scanf(&quot;%d&quot;, &amp;t);</span><br><span class="line">    while(t--) &#123;</span><br><span class="line">scanf(&quot;%d&quot;, &amp;n);</span><br><span class="line">if(n == 2) printf(&quot;0 2 1 3\n&quot;);</span><br><span class="line">else if(n == 3) printf(&quot;1 4 2 5 3 6\n&quot;);</span><br><span class="line">else if(n == 4) printf(&quot;0 6 1 9 3 8 4 10\n&quot;);</span><br><span class="line">        else if(n == 5) printf(&quot;0 5 1 6 2 7 3 8 11 13\n&quot;);</span><br><span class="line">else &#123;</span><br><span class="line">for(int i = 0; i &lt; n - 1; i++) printf(&quot;%d %d &quot;, i, i + n);</span><br><span class="line">printf(&quot;%d %d\n&quot;, n * 4 - 5, n * 2);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="J-CONTINUE…"><a href="#J-CONTINUE…" class="headerlink" title="J. CONTINUE…?"></a>J. CONTINUE…?</h1><p>DreamGrid has  classmates numbered from  to . Some of them are boys and the others are girls. Each classmate has some gems, and more specifically, the -th classmate has  gems.</p><p>DreamGrid would like to divide the classmates into four groups , ,  and  such that:</p><p>Each classmate belongs to exactly one group.</p><p>Both  and  consist only of girls. Both  and  consist only of boys.</p><p>The total number of gems in  and  is equal to the total number of gems in  and .</p><p>Your task is to help DreamGrid group his classmates so that the above conditions are satisfied. Note that you are allowed to leave some groups empty.</p><p>Input<br>There are multiple test cases. The first line of input is an integer  indicating the number of test cases. For each test case:</p><p>The first line contains an integer  () – the number of classmates.</p><p>The second line contains a string  () consisting of 0 and 1. Let  be the -th character in the string . If , the -th classmate is a boy; If , the -th classmate is a girl.</p><p>It is guaranteed that the sum of all  does not exceed .</p><p>Output<br>For each test case, output a string consists only of {1, 2, 3, 4}. The -th character in the string denotes the group which the -th classmate belongs to. If there are multiple valid answers, you can print any of them; If there is no valid answer, output “-1” (without quotes) instead.</p><p>Sample Input<br>5<br>1<br>1<br>2<br>10<br>3<br>101<br>4<br>0000<br>7<br>1101001<br>Sample Output<br>-1<br>-1<br>314<br>1221<br>3413214</p><h2 id="Description-2"><a href="#Description-2" class="headerlink" title="Description"></a>Description</h2><p>给出n个为0或1数字，每个数字的价值为i，0只能在1、2集合中，1只能在3、4集合中，要求集合1、3的价值和等于2、4的价值和</p><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>暴力枚举</p><h2 id="Code-2"><a href="#Code-2" class="headerlink" title="Code"></a>Code</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;cstdio&gt;</span><br><span class="line">#include &lt;cstring&gt;</span><br><span class="line">#include &lt;string&gt;</span><br><span class="line">#include &lt;cstdlib&gt;</span><br><span class="line">#include &lt;iostream&gt;</span><br><span class="line">#include &lt;algorithm&gt;</span><br><span class="line">#include &lt;cmath&gt;</span><br><span class="line">#include &lt;map&gt;</span><br><span class="line">#include &lt;set&gt;</span><br><span class="line">#include &lt;queue&gt;</span><br><span class="line">#include &lt;vector&gt;</span><br><span class="line">#include &lt;stack&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">typedef long long LL;</span><br><span class="line">typedef unsigned long long ULL;</span><br><span class="line">typedef pair&lt;int, int&gt; PII;</span><br><span class="line">const int INF = 0x3f3f3f3f;</span><br><span class="line">const int MaxN = 1e5 + 5;</span><br><span class="line"></span><br><span class="line">int a[MaxN], ans[MaxN];</span><br><span class="line"></span><br><span class="line">int main() &#123;</span><br><span class="line">int t, n;</span><br><span class="line">scanf(&quot;%d&quot;, &amp;t);</span><br><span class="line">while(t--) &#123;</span><br><span class="line">scanf(&quot;%d&quot;, &amp;n);</span><br><span class="line">for(int i = 1; i &lt;= n; i++) scanf(&quot;%1d&quot;, &amp;a[i]);</span><br><span class="line">LL sum = n * 1LL * (n + 1) / 2;</span><br><span class="line">if(sum % 2) printf(&quot;-1\n&quot;);</span><br><span class="line">else &#123;</span><br><span class="line">sum /= 2;</span><br><span class="line">for(int i = n; i &gt;= 1; i--) &#123;</span><br><span class="line">if(sum &gt;= i) &#123;</span><br><span class="line">sum -= i;</span><br><span class="line">ans[i] = (a[i] == 0) ? 1 : 3;</span><br><span class="line">&#125;</span><br><span class="line">else ans[i] = (a[i] == 0) ? 2 : 4;</span><br><span class="line">&#125;</span><br><span class="line">for(int i = 1; i &lt;= n; i++) printf(&quot;%d&quot;, ans[i]);</span><br><span class="line">printf(&quot;\n&quot;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
